module.exports=(function(){
  /* Generated by PEG.js 0.6.2 (http://pegjs.majda.cz/). */
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "add_expression": parse_add_expression,
        "and_expression": parse_and_expression,
        "argument": parse_argument,
        "argument_fun": parse_argument_fun,
        "argument_type": parse_argument_type,
        "assignment": parse_assignment,
        "assignment_line": parse_assignment_line,
        "condition": parse_condition,
        "equality_exp": parse_equality_exp,
        "func_block": parse_func_block,
        "func_call": parse_func_call,
        "function": parse_function,
        "function_input": parse_function_input,
        "function_name": parse_function_name,
        "function_output": parse_function_output,
        "function_type": parse_function_type,
        "id": parse_id,
        "ifFun": parse_ifFun,
        "if_block": parse_if_block,
        "ifbody": parse_ifbody,
        "ifelse": parse_ifelse,
        "io": parse_io,
        "io_line": parse_io_line,
        "legalArgs": parse_legalArgs,
        "logical_and_exp": parse_logical_and_exp,
        "logical_or_exp": parse_logical_or_exp,
        "loop_block": parse_loop_block,
        "mul_expression": parse_mul_expression,
        "neg_op": parse_neg_op,
        "newLine": parse_newLine,
        "not_expression": parse_not_expression,
        "not_op": parse_not_op,
        "or_expression": parse_or_expression,
        "primitive_expression": parse_primitive_expression,
        "relational_exp": parse_relational_exp,
        "root": parse_root,
        "separator": parse_separator,
        "space": parse_space,
        "spiderType": parse_spiderType,
        "start": parse_start,
        "string": parse_string,
        "typeName": parse_typeName,
        "unary_expression": parse_unary_expression,
        "unsure": parse_unsure,
        "xor_expression": parse_xor_expression
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "start";
      }
      
      var pos = 0;
      var reportMatchFailures = true;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        
        if (charCode <= 0xFF) {
          var escapeChar = 'x';
          var length = 2;
        } else {
          var escapeChar = 'u';
          var length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')            // backslash
          .replace(/"/g, '\\"')              // closing quote character
          .replace(/\r/g, '\\r')             // carriage return
          .replace(/\n/g, '\\n')             // line feed
          .replace(/[\x80-\uFFFF]/g, escape) // non-ASCII characters
          + '"';
      }
      
      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }
        
        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }
        
        rightmostMatchFailuresExpected.push(failure);
      }
      
      function parse_start() {
        var cacheKey = 'start@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result0 = [];
        var result1 = parse_root();
        while (result1 !== null) {
          result0.push(result1);
          var result1 = parse_root();
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_root() {
        var cacheKey = 'root@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result6 = parse_loop_block();
        if (result6 !== null) {
          var result0 = result6;
        } else {
          var result5 = parse_if_block();
          if (result5 !== null) {
            var result0 = result5;
          } else {
            var result4 = parse_func_block();
            if (result4 !== null) {
              var result0 = result4;
            } else {
              var result3 = parse_func_call();
              if (result3 !== null) {
                var result0 = result3;
              } else {
                var result2 = parse_io_line();
                if (result2 !== null) {
                  var result0 = result2;
                } else {
                  var result1 = parse_assignment_line();
                  if (result1 !== null) {
                    var result0 = result1;
                  } else {
                    var result0 = null;;
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_func_call() {
        var cacheKey = 'func_call@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_space();
        if (result3 !== null) {
          var result4 = parse_function();
          if (result4 !== null) {
            var result5 = parse_newLine();
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(fun) {counter++; return createNode(NODE_FUN_CALL, "function" ,fun)})(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_if_block() {
        var cacheKey = 'if_block@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_space();
        if (result3 !== null) {
          var result4 = parse_ifFun();
          if (result4 !== null) {
            var result5 = parse_space();
            if (result5 !== null) {
              var result6 = parse_condition();
              if (result6 !== null) {
                var result7 = parse_space();
                if (result7 !== null) {
                  if (input.substr(pos, 2) === "so") {
                    var result8 = "so";
                    pos += 2;
                  } else {
                    var result8 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"so\"");
                    }
                  }
                  if (result8 !== null) {
                    var result9 = parse_space();
                    if (result9 !== null) {
                      var result10 = [];
                      if (input.substr(pos).match(/^[\n]/) !== null) {
                        var result12 = input.charAt(pos);
                        pos++;
                      } else {
                        var result12 = null;
                        if (reportMatchFailures) {
                          matchFailed("[\\n]");
                        }
                      }
                      while (result12 !== null) {
                        result10.push(result12);
                        if (input.substr(pos).match(/^[\n]/) !== null) {
                          var result12 = input.charAt(pos);
                          pos++;
                        } else {
                          var result12 = null;
                          if (reportMatchFailures) {
                            matchFailed("[\\n]");
                          }
                        }
                      }
                      if (result10 !== null) {
                        var result11 = parse_ifbody();
                        if (result11 !== null) {
                          var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11];
                        } else {
                          var result1 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(name, cond, ifB) {counter++; return createNode(NODE_IF, name, cond, ifB)})(result1[1], result1[3], result1[8])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ifelse() {
        var cacheKey = 'ifelse@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos4 = pos;
        var savedPos5 = pos;
        var result24 = parse_space();
        if (result24 !== null) {
          if (input.substr(pos, 2) === "or") {
            var result25 = "or";
            pos += 2;
          } else {
            var result25 = null;
            if (reportMatchFailures) {
              matchFailed("\"or\"");
            }
          }
          if (result25 !== null) {
            var result26 = parse_space();
            if (result26 !== null) {
              var result27 = [];
              if (input.substr(pos).match(/^[\n]/) !== null) {
                var result30 = input.charAt(pos);
                pos++;
              } else {
                var result30 = null;
                if (reportMatchFailures) {
                  matchFailed("[\\n]");
                }
              }
              while (result30 !== null) {
                result27.push(result30);
                if (input.substr(pos).match(/^[\n]/) !== null) {
                  var result30 = input.charAt(pos);
                  pos++;
                } else {
                  var result30 = null;
                  if (reportMatchFailures) {
                    matchFailed("[\\n]");
                  }
                }
              }
              if (result27 !== null) {
                var result28 = parse_start();
                if (result28 !== null) {
                  var result29 = parse_ifelse();
                  if (result29 !== null) {
                    var result22 = [result24, result25, result26, result27, result28, result29];
                  } else {
                    var result22 = null;
                    pos = savedPos5;
                  }
                } else {
                  var result22 = null;
                  pos = savedPos5;
                }
              } else {
                var result22 = null;
                pos = savedPos5;
              }
            } else {
              var result22 = null;
              pos = savedPos5;
            }
          } else {
            var result22 = null;
            pos = savedPos5;
          }
        } else {
          var result22 = null;
          pos = savedPos5;
        }
        var result23 = result22 !== null
          ? (function(ifBody, ife) {counter++; return createNode(NODE_ELSE, "else", ifBody, ife)})(result22[4], result22[5])
          : null;
        if (result23 !== null) {
          var result21 = result23;
        } else {
          var result21 = null;
          pos = savedPos4;
        }
        if (result21 !== null) {
          var result0 = result21;
        } else {
          var savedPos2 = pos;
          var savedPos3 = pos;
          var result10 = parse_space();
          if (result10 !== null) {
            if (input.substr(pos, 8) === "or maybe") {
              var result11 = "or maybe";
              pos += 8;
            } else {
              var result11 = null;
              if (reportMatchFailures) {
                matchFailed("\"or maybe\"");
              }
            }
            if (result11 !== null) {
              var result12 = parse_space();
              if (result12 !== null) {
                var result13 = parse_condition();
                if (result13 !== null) {
                  var result14 = parse_space();
                  if (result14 !== null) {
                    if (input.substr(pos, 2) === "so") {
                      var result15 = "so";
                      pos += 2;
                    } else {
                      var result15 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"so\"");
                      }
                    }
                    if (result15 !== null) {
                      var result16 = parse_space();
                      if (result16 !== null) {
                        var result17 = [];
                        if (input.substr(pos).match(/^[\n]/) !== null) {
                          var result20 = input.charAt(pos);
                          pos++;
                        } else {
                          var result20 = null;
                          if (reportMatchFailures) {
                            matchFailed("[\\n]");
                          }
                        }
                        while (result20 !== null) {
                          result17.push(result20);
                          if (input.substr(pos).match(/^[\n]/) !== null) {
                            var result20 = input.charAt(pos);
                            pos++;
                          } else {
                            var result20 = null;
                            if (reportMatchFailures) {
                              matchFailed("[\\n]");
                            }
                          }
                        }
                        if (result17 !== null) {
                          var result18 = parse_start();
                          if (result18 !== null) {
                            var result19 = parse_ifelse();
                            if (result19 !== null) {
                              var result8 = [result10, result11, result12, result13, result14, result15, result16, result17, result18, result19];
                            } else {
                              var result8 = null;
                              pos = savedPos3;
                            }
                          } else {
                            var result8 = null;
                            pos = savedPos3;
                          }
                        } else {
                          var result8 = null;
                          pos = savedPos3;
                        }
                      } else {
                        var result8 = null;
                        pos = savedPos3;
                      }
                    } else {
                      var result8 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result8 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result8 = null;
                  pos = savedPos3;
                }
              } else {
                var result8 = null;
                pos = savedPos3;
              }
            } else {
              var result8 = null;
              pos = savedPos3;
            }
          } else {
            var result8 = null;
            pos = savedPos3;
          }
          var result9 = result8 !== null
            ? (function(cond, ifBody, ife) {counter++; return createNode(NODE_ELSE, "maybe", cond, ifBody, ife)})(result8[3], result8[8], result8[9])
            : null;
          if (result9 !== null) {
            var result7 = result9;
          } else {
            var result7 = null;
            pos = savedPos2;
          }
          if (result7 !== null) {
            var result0 = result7;
          } else {
            var savedPos0 = pos;
            var savedPos1 = pos;
            var result4 = parse_space();
            if (result4 !== null) {
              var result5 = parse_unsure();
              if (result5 !== null) {
                var result6 = parse_newLine();
                if (result6 !== null) {
                  var result2 = [result4, result5, result6];
                } else {
                  var result2 = null;
                  pos = savedPos1;
                }
              } else {
                var result2 = null;
                pos = savedPos1;
              }
            } else {
              var result2 = null;
              pos = savedPos1;
            }
            var result3 = result2 !== null
              ? (function() {return "endif"})()
              : null;
            if (result3 !== null) {
              var result1 = result3;
            } else {
              var result1 = null;
              pos = savedPos0;
            }
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ifbody() {
        var cacheKey = 'ifbody@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_space();
        if (result3 !== null) {
          var result4 = parse_start();
          if (result4 !== null) {
            var result5 = parse_ifelse();
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(ifBody, ifE) {counter++; return createNode(NODE_IF_BODY, "body", ifBody, ifE)})(result1[1], result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_function() {
        var cacheKey = 'function@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        var savedPos3 = pos;
        var result12 = parse_id();
        if (result12 !== null) {
          var result13 = parse_space();
          if (result13 !== null) {
            if (input.substr(pos, 1) === "(") {
              var result14 = "(";
              pos += 1;
            } else {
              var result14 = null;
              if (reportMatchFailures) {
                matchFailed("\"(\"");
              }
            }
            if (result14 !== null) {
              var result15 = [];
              var result17 = parse_argument_fun();
              while (result17 !== null) {
                result15.push(result17);
                var result17 = parse_argument_fun();
              }
              if (result15 !== null) {
                if (input.substr(pos, 1) === ")") {
                  var result16 = ")";
                  pos += 1;
                } else {
                  var result16 = null;
                  if (reportMatchFailures) {
                    matchFailed("\")\"");
                  }
                }
                if (result16 !== null) {
                  var result10 = [result12, result13, result14, result15, result16];
                } else {
                  var result10 = null;
                  pos = savedPos3;
                }
              } else {
                var result10 = null;
                pos = savedPos3;
              }
            } else {
              var result10 = null;
              pos = savedPos3;
            }
          } else {
            var result10 = null;
            pos = savedPos3;
          }
        } else {
          var result10 = null;
          pos = savedPos3;
        }
        var result11 = result10 !== null
          ? (function(identifier, arglist) {counter++; return createNode(NODE_FUN, identifier, arglist)})(result10[0], result10[3])
          : null;
        if (result11 !== null) {
          var result9 = result11;
        } else {
          var result9 = null;
          pos = savedPos2;
        }
        if (result9 !== null) {
          var result0 = result9;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          var result4 = parse_id();
          if (result4 !== null) {
            var result5 = parse_space();
            if (result5 !== null) {
              if (input.substr(pos, 12) === "went through") {
                var result6 = "went through";
                pos += 12;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\"went through\"");
                }
              }
              if (result6 !== null) {
                var result7 = parse_space();
                if (result7 !== null) {
                  var result8 = parse_id();
                  if (result8 !== null) {
                    var result2 = [result4, result5, result6, result7, result8];
                  } else {
                    var result2 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos1;
                }
              } else {
                var result2 = null;
                pos = savedPos1;
              }
            } else {
              var result2 = null;
              pos = savedPos1;
            }
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          var result3 = result2 !== null
            ? (function(arg, identifier) {counter++; return createNode(NODE_FUN, arg, identifier)})(result2[0], result2[4])
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_argument_fun() {
        var cacheKey = 'argument_fun@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_space();
        if (result3 !== null) {
          var result4 = parse_legalArgs();
          if (result4 !== null) {
            var result7 = parse_separator();
            var result5 = result7 !== null ? result7 : '';
            if (result5 !== null) {
              var result6 = parse_space();
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(arg) { return arg })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_func_block() {
        var cacheKey = 'func_block@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        var savedPos3 = pos;
        var result18 = parse_space();
        if (result18 !== null) {
          if (input.substr(pos, 8) === "The room") {
            var result19 = "The room";
            pos += 8;
          } else {
            var result19 = null;
            if (reportMatchFailures) {
              matchFailed("\"The room\"");
            }
          }
          if (result19 !== null) {
            var result20 = parse_space();
            if (result20 !== null) {
              var result21 = parse_function_type();
              if (result21 !== null) {
                if (input.substr(pos, 11) === "contained a") {
                  var result22 = "contained a";
                  pos += 11;
                } else {
                  var result22 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"contained a\"");
                  }
                }
                if (result22 !== null) {
                  var result23 = parse_space();
                  if (result23 !== null) {
                    var result24 = parse_typeName();
                    if (result24 !== null) {
                      var result25 = [];
                      if (input.substr(pos).match(/^[\n]/) !== null) {
                        var result27 = input.charAt(pos);
                        pos++;
                      } else {
                        var result27 = null;
                        if (reportMatchFailures) {
                          matchFailed("[\\n]");
                        }
                      }
                      while (result27 !== null) {
                        result25.push(result27);
                        if (input.substr(pos).match(/^[\n]/) !== null) {
                          var result27 = input.charAt(pos);
                          pos++;
                        } else {
                          var result27 = null;
                          if (reportMatchFailures) {
                            matchFailed("[\\n]");
                          }
                        }
                      }
                      if (result25 !== null) {
                        var result26 = parse_start();
                        if (result26 !== null) {
                          var result16 = [result18, result19, result20, result21, result22, result23, result24, result25, result26];
                        } else {
                          var result16 = null;
                          pos = savedPos3;
                        }
                      } else {
                        var result16 = null;
                        pos = savedPos3;
                      }
                    } else {
                      var result16 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result16 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result16 = null;
                  pos = savedPos3;
                }
              } else {
                var result16 = null;
                pos = savedPos3;
              }
            } else {
              var result16 = null;
              pos = savedPos3;
            }
          } else {
            var result16 = null;
            pos = savedPos3;
          }
        } else {
          var result16 = null;
          pos = savedPos3;
        }
        var result17 = result16 !== null
          ? (function(def, type, funcB) {counter++; return createNode( NODE_FUN_DEF, type, def, funcB)})(result16[3], result16[6], result16[8])
          : null;
        if (result17 !== null) {
          var result15 = result17;
        } else {
          var result15 = null;
          pos = savedPos2;
        }
        if (result15 !== null) {
          var result0 = result15;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          var result4 = parse_space();
          if (result4 !== null) {
            if (input.substr(pos, 17) === "The Looking-Glass") {
              var result5 = "The Looking-Glass";
              pos += 17;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"The Looking-Glass\"");
              }
            }
            if (result5 !== null) {
              var result6 = parse_space();
              if (result6 !== null) {
                var result7 = parse_id();
                if (result7 !== null) {
                  var result8 = parse_space();
                  if (result8 !== null) {
                    if (input.substr(pos, 9) === "changed a") {
                      var result9 = "changed a";
                      pos += 9;
                    } else {
                      var result9 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"changed a\"");
                      }
                    }
                    if (result9 !== null) {
                      var result10 = parse_space();
                      if (result10 !== null) {
                        var result11 = parse_typeName();
                        if (result11 !== null) {
                          var result12 = [];
                          if (input.substr(pos).match(/^[\n]/) !== null) {
                            var result14 = input.charAt(pos);
                            pos++;
                          } else {
                            var result14 = null;
                            if (reportMatchFailures) {
                              matchFailed("[\\n]");
                            }
                          }
                          while (result14 !== null) {
                            result12.push(result14);
                            if (input.substr(pos).match(/^[\n]/) !== null) {
                              var result14 = input.charAt(pos);
                              pos++;
                            } else {
                              var result14 = null;
                              if (reportMatchFailures) {
                                matchFailed("[\\n]");
                              }
                            }
                          }
                          if (result12 !== null) {
                            var result13 = parse_start();
                            if (result13 !== null) {
                              var result2 = [result4, result5, result6, result7, result8, result9, result10, result11, result12, result13];
                            } else {
                              var result2 = null;
                              pos = savedPos1;
                            }
                          } else {
                            var result2 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result2 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result2 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result2 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result2 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos1;
                }
              } else {
                var result2 = null;
                pos = savedPos1;
              }
            } else {
              var result2 = null;
              pos = savedPos1;
            }
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          var result3 = result2 !== null
            ? (function(identifier, type, funcB) {counter++; return createNode( NODE_LOOK_DEF, identifier, type, funcB)})(result2[3], result2[7], result2[9])
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_function_type() {
        var cacheKey = 'function_type@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_id();
        if (result3 !== null) {
          var result4 = parse_space();
          if (result4 !== null) {
            if (input.substr(pos, 1) === "(") {
              var result5 = "(";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"(\"");
              }
            }
            if (result5 !== null) {
              var result6 = parse_space();
              if (result6 !== null) {
                var result7 = [];
                var result11 = parse_argument_type();
                while (result11 !== null) {
                  result7.push(result11);
                  var result11 = parse_argument_type();
                }
                if (result7 !== null) {
                  var result8 = parse_space();
                  if (result8 !== null) {
                    if (input.substr(pos, 1) === ")") {
                      var result9 = ")";
                      pos += 1;
                    } else {
                      var result9 = null;
                      if (reportMatchFailures) {
                        matchFailed("\")\"");
                      }
                    }
                    if (result9 !== null) {
                      var result10 = parse_space();
                      if (result10 !== null) {
                        var result1 = [result3, result4, result5, result6, result7, result8, result9, result10];
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(identifier, arglist) {counter++; return createNode(NODE_FUN, identifier, arglist)})(result1[0], result1[4])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_argument_type() {
        var cacheKey = 'argument_type@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_space();
        if (result3 !== null) {
          var result11 = parse_spiderType();
          var result4 = result11 !== null ? result11 : '';
          if (result4 !== null) {
            var result5 = parse_space();
            if (result5 !== null) {
              var result6 = parse_typeName();
              if (result6 !== null) {
                var result7 = parse_space();
                if (result7 !== null) {
                  var result8 = parse_id();
                  if (result8 !== null) {
                    var result10 = parse_separator();
                    var result9 = result10 !== null ? result10 : '';
                    if (result9 !== null) {
                      var result1 = [result3, result4, result5, result6, result7, result8, result9];
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(stype, type, identifier) { counter++; return createNode( NODE_TYPE, "funArgument", identifier, type, stype ) })(result1[1], result1[3], result1[5])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_loop_block() {
        var cacheKey = 'loop_block@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_space();
        if (result3 !== null) {
          if (input.substr(pos, 10) === "eventually") {
            var result4 = "eventually";
            pos += 10;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"eventually\"");
            }
          }
          if (result4 !== null) {
            var result5 = parse_space();
            if (result5 !== null) {
              var result6 = parse_condition();
              if (result6 !== null) {
                var result7 = parse_space();
                if (result7 !== null) {
                  if (input.substr(pos, 7) === "because") {
                    var result8 = "because";
                    pos += 7;
                  } else {
                    var result8 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"because\"");
                    }
                  }
                  if (result8 !== null) {
                    var result9 = parse_space();
                    if (result9 !== null) {
                      var result10 = [];
                      if (input.substr(pos).match(/^[\n]/) !== null) {
                        var result18 = input.charAt(pos);
                        pos++;
                      } else {
                        var result18 = null;
                        if (reportMatchFailures) {
                          matchFailed("[\\n]");
                        }
                      }
                      while (result18 !== null) {
                        result10.push(result18);
                        if (input.substr(pos).match(/^[\n]/) !== null) {
                          var result18 = input.charAt(pos);
                          pos++;
                        } else {
                          var result18 = null;
                          if (reportMatchFailures) {
                            matchFailed("[\\n]");
                          }
                        }
                      }
                      if (result10 !== null) {
                        var result11 = parse_start();
                        if (result11 !== null) {
                          var result12 = parse_space();
                          if (result12 !== null) {
                            var result13 = [];
                            if (input.substr(pos).match(/^[\n]/) !== null) {
                              var result17 = input.charAt(pos);
                              pos++;
                            } else {
                              var result17 = null;
                              if (reportMatchFailures) {
                                matchFailed("[\\n]");
                              }
                            }
                            while (result17 !== null) {
                              result13.push(result17);
                              if (input.substr(pos).match(/^[\n]/) !== null) {
                                var result17 = input.charAt(pos);
                                pos++;
                              } else {
                                var result17 = null;
                                if (reportMatchFailures) {
                                  matchFailed("[\\n]");
                                }
                              }
                            }
                            if (result13 !== null) {
                              var result14 = parse_space();
                              if (result14 !== null) {
                                if (input.substr(pos, 12) === "enough times") {
                                  var result15 = "enough times";
                                  pos += 12;
                                } else {
                                  var result15 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\"enough times\"");
                                  }
                                }
                                if (result15 !== null) {
                                  var result16 = parse_newLine();
                                  if (result16 !== null) {
                                    var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16];
                                  } else {
                                    var result1 = null;
                                    pos = savedPos1;
                                  }
                                } else {
                                  var result1 = null;
                                  pos = savedPos1;
                                }
                              } else {
                                var result1 = null;
                                pos = savedPos1;
                              }
                            } else {
                              var result1 = null;
                              pos = savedPos1;
                            }
                          } else {
                            var result1 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(cond, loop) {counter++; return createNode( NODE_LOOP, cond, loop )})(result1[3], result1[8])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_io_line() {
        var cacheKey = 'io_line@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        var savedPos3 = pos;
        var result9 = parse_io();
        if (result9 !== null) {
          var result10 = parse_separator();
          if (result10 !== null) {
            var result7 = [result9, result10];
          } else {
            var result7 = null;
            pos = savedPos3;
          }
        } else {
          var result7 = null;
          pos = savedPos3;
        }
        var result8 = result7 !== null
          ? (function(single) { return single })(result7[0])
          : null;
        if (result8 !== null) {
          var result6 = result8;
        } else {
          var result6 = null;
          pos = savedPos2;
        }
        if (result6 !== null) {
          var result0 = result6;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          var result4 = parse_io();
          if (result4 !== null) {
            var result5 = parse_newLine();
            if (result5 !== null) {
              var result2 = [result4, result5];
            } else {
              var result2 = null;
              pos = savedPos1;
            }
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          var result3 = result2 !== null
            ? (function(single) { return single })(result2[0])
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_io() {
        var cacheKey = 'io@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos6 = pos;
        var savedPos7 = pos;
        var result28 = parse_space();
        if (result28 !== null) {
          var result29 = parse_legalArgs();
          if (result29 !== null) {
            var result30 = parse_space();
            if (result30 !== null) {
              var result31 = parse_function_output();
              if (result31 !== null) {
                var result32 = parse_space();
                if (result32 !== null) {
                  if (input.substr(pos, 5) === "Alice") {
                    var result33 = "Alice";
                    pos += 5;
                  } else {
                    var result33 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"Alice\"");
                    }
                  }
                  if (result33 !== null) {
                    var result26 = [result28, result29, result30, result31, result32, result33];
                  } else {
                    var result26 = null;
                    pos = savedPos7;
                  }
                } else {
                  var result26 = null;
                  pos = savedPos7;
                }
              } else {
                var result26 = null;
                pos = savedPos7;
              }
            } else {
              var result26 = null;
              pos = savedPos7;
            }
          } else {
            var result26 = null;
            pos = savedPos7;
          }
        } else {
          var result26 = null;
          pos = savedPos7;
        }
        var result27 = result26 !== null
          ? (function(arg, name) {counter++; return createNode( NODE_IO, name, arg)})(result26[1], result26[3])
          : null;
        if (result27 !== null) {
          var result25 = result27;
        } else {
          var result25 = null;
          pos = savedPos6;
        }
        if (result25 !== null) {
          var result0 = result25;
        } else {
          var savedPos4 = pos;
          var savedPos5 = pos;
          var result21 = parse_space();
          if (result21 !== null) {
            var result22 = parse_legalArgs();
            if (result22 !== null) {
              var result23 = parse_space();
              if (result23 !== null) {
                var result24 = parse_function_output();
                if (result24 !== null) {
                  var result19 = [result21, result22, result23, result24];
                } else {
                  var result19 = null;
                  pos = savedPos5;
                }
              } else {
                var result19 = null;
                pos = savedPos5;
              }
            } else {
              var result19 = null;
              pos = savedPos5;
            }
          } else {
            var result19 = null;
            pos = savedPos5;
          }
          var result20 = result19 !== null
            ? (function(arg, name) {counter++; return createNode(NODE_IO, name, arg)})(result19[1], result19[3])
            : null;
          if (result20 !== null) {
            var result18 = result20;
          } else {
            var result18 = null;
            pos = savedPos4;
          }
          if (result18 !== null) {
            var result0 = result18;
          } else {
            var savedPos2 = pos;
            var savedPos3 = pos;
            var result11 = parse_space();
            if (result11 !== null) {
              if (input.substr(pos, 5) === "Alice") {
                var result12 = "Alice";
                pos += 5;
              } else {
                var result12 = null;
                if (reportMatchFailures) {
                  matchFailed("\"Alice\"");
                }
              }
              if (result12 !== null) {
                var result13 = parse_space();
                if (result13 !== null) {
                  if (input.substr(pos, 5) === "found") {
                    var result14 = "found";
                    pos += 5;
                  } else {
                    var result14 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"found\"");
                    }
                  }
                  if (result14 !== null) {
                    var result15 = parse_space();
                    if (result15 !== null) {
                      var result16 = parse_legalArgs();
                      if (result16 !== null) {
                        var result17 = parse_space();
                        if (result17 !== null) {
                          var result9 = [result11, result12, result13, result14, result15, result16, result17];
                        } else {
                          var result9 = null;
                          pos = savedPos3;
                        }
                      } else {
                        var result9 = null;
                        pos = savedPos3;
                      }
                    } else {
                      var result9 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result9 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result9 = null;
                  pos = savedPos3;
                }
              } else {
                var result9 = null;
                pos = savedPos3;
              }
            } else {
              var result9 = null;
              pos = savedPos3;
            }
            var result10 = result9 !== null
              ? (function(arg) {counter++; return createNode(NODE_IO, 'found', arg)})(result9[5])
              : null;
            if (result10 !== null) {
              var result8 = result10;
            } else {
              var result8 = null;
              pos = savedPos2;
            }
            if (result8 !== null) {
              var result0 = result8;
            } else {
              var savedPos0 = pos;
              var savedPos1 = pos;
              var result4 = parse_space();
              if (result4 !== null) {
                var result5 = parse_function_input();
                if (result5 !== null) {
                  var result6 = parse_space();
                  if (result6 !== null) {
                    var result7 = parse_argument();
                    if (result7 !== null) {
                      var result2 = [result4, result5, result6, result7];
                    } else {
                      var result2 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result2 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos1;
                }
              } else {
                var result2 = null;
                pos = savedPos1;
              }
              var result3 = result2 !== null
                ? (function(name, arg) {counter++; return createNode(NODE_IO, name, arg)})(result2[1], result2[3])
                : null;
              if (result3 !== null) {
                var result1 = result3;
              } else {
                var result1 = null;
                pos = savedPos0;
              }
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_legalArgs() {
        var cacheKey = 'legalArgs@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos3 = pos;
        var result11 = parse_function();
        var result12 = result11 !== null
          ? (function(fun) {return fun})(result11)
          : null;
        if (result12 !== null) {
          var result10 = result12;
        } else {
          var result10 = null;
          pos = savedPos3;
        }
        if (result10 !== null) {
          var result0 = result10;
        } else {
          var savedPos2 = pos;
          var result8 = parse_logical_or_exp();
          var result9 = result8 !== null
            ? (function(expr) {return expr})(result8)
            : null;
          if (result9 !== null) {
            var result7 = result9;
          } else {
            var result7 = null;
            pos = savedPos2;
          }
          if (result7 !== null) {
            var result0 = result7;
          } else {
            var savedPos1 = pos;
            var result5 = parse_argument();
            var result6 = result5 !== null
              ? (function(arg) {return arg})(result5)
              : null;
            if (result6 !== null) {
              var result4 = result6;
            } else {
              var result4 = null;
              pos = savedPos1;
            }
            if (result4 !== null) {
              var result0 = result4;
            } else {
              var savedPos0 = pos;
              var result2 = parse_string();
              var result3 = result2 !== null
                ? (function(str) {return str})(result2)
                : null;
              if (result3 !== null) {
                var result1 = result3;
              } else {
                var result1 = null;
                pos = savedPos0;
              }
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_assignment_line() {
        var cacheKey = 'assignment_line@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        var savedPos3 = pos;
        var result9 = parse_assignment();
        if (result9 !== null) {
          var result10 = parse_separator();
          if (result10 !== null) {
            var result7 = [result9, result10];
          } else {
            var result7 = null;
            pos = savedPos3;
          }
        } else {
          var result7 = null;
          pos = savedPos3;
        }
        var result8 = result7 !== null
          ? (function(single) { return single })(result7[0])
          : null;
        if (result8 !== null) {
          var result6 = result8;
        } else {
          var result6 = null;
          pos = savedPos2;
        }
        if (result6 !== null) {
          var result0 = result6;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          var result4 = parse_assignment();
          if (result4 !== null) {
            var result5 = parse_newLine();
            if (result5 !== null) {
              var result2 = [result4, result5];
            } else {
              var result2 = null;
              pos = savedPos1;
            }
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          var result3 = result2 !== null
            ? (function(single) { return single })(result2[0])
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_assignment() {
        var cacheKey = 'assignment@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos6 = pos;
        var savedPos7 = pos;
        var result30 = parse_space();
        if (result30 !== null) {
          var result31 = parse_id();
          if (result31 !== null) {
            var result32 = parse_space();
            if (result32 !== null) {
              var result33 = parse_function_name();
              if (result33 !== null) {
                var result34 = parse_space();
                if (result34 !== null) {
                  var result35 = parse_typeName();
                  if (result35 !== null) {
                    var result28 = [result30, result31, result32, result33, result34, result35];
                  } else {
                    var result28 = null;
                    pos = savedPos7;
                  }
                } else {
                  var result28 = null;
                  pos = savedPos7;
                }
              } else {
                var result28 = null;
                pos = savedPos7;
              }
            } else {
              var result28 = null;
              pos = savedPos7;
            }
          } else {
            var result28 = null;
            pos = savedPos7;
          }
        } else {
          var result28 = null;
          pos = savedPos7;
        }
        var result29 = result28 !== null
          ? (function(identifier, name, type) { counter++; return createNode( NODE_TYPE, name, identifier, type ) })(result28[1], result28[3], result28[5])
          : null;
        if (result29 !== null) {
          var result27 = result29;
        } else {
          var result27 = null;
          pos = savedPos6;
        }
        if (result27 !== null) {
          var result0 = result27;
        } else {
          var savedPos4 = pos;
          var savedPos5 = pos;
          var result22 = parse_space();
          if (result22 !== null) {
            var result23 = parse_argument();
            if (result23 !== null) {
              var result24 = parse_space();
              if (result24 !== null) {
                var result25 = parse_function_name();
                if (result25 !== null) {
                  var result26 = parse_legalArgs();
                  if (result26 !== null) {
                    var result20 = [result22, result23, result24, result25, result26];
                  } else {
                    var result20 = null;
                    pos = savedPos5;
                  }
                } else {
                  var result20 = null;
                  pos = savedPos5;
                }
              } else {
                var result20 = null;
                pos = savedPos5;
              }
            } else {
              var result20 = null;
              pos = savedPos5;
            }
          } else {
            var result20 = null;
            pos = savedPos5;
          }
          var result21 = result20 !== null
            ? (function(arg, name, expr) { counter++; return createNode( NODE_VAR, name, arg, expr ) })(result20[1], result20[3], result20[4])
            : null;
          if (result21 !== null) {
            var result19 = result21;
          } else {
            var result19 = null;
            pos = savedPos4;
          }
          if (result19 !== null) {
            var result0 = result19;
          } else {
            var savedPos2 = pos;
            var savedPos3 = pos;
            var result15 = parse_space();
            if (result15 !== null) {
              var result16 = parse_id();
              if (result16 !== null) {
                var result17 = parse_space();
                if (result17 !== null) {
                  var result18 = parse_function_name();
                  if (result18 !== null) {
                    var result13 = [result15, result16, result17, result18];
                  } else {
                    var result13 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result13 = null;
                  pos = savedPos3;
                }
              } else {
                var result13 = null;
                pos = savedPos3;
              }
            } else {
              var result13 = null;
              pos = savedPos3;
            }
            var result14 = result13 !== null
              ? (function(identifier, name) { counter++; return createNode( NODE_VAR, name, identifier ) })(result13[1], result13[3])
              : null;
            if (result14 !== null) {
              var result12 = result14;
            } else {
              var result12 = null;
              pos = savedPos2;
            }
            if (result12 !== null) {
              var result0 = result12;
            } else {
              var savedPos0 = pos;
              var savedPos1 = pos;
              var result4 = parse_space();
              if (result4 !== null) {
                var result5 = parse_id();
                if (result5 !== null) {
                  var result6 = parse_space();
                  if (result6 !== null) {
                    if (input.substr(pos, 3) === "had") {
                      var result7 = "had";
                      pos += 3;
                    } else {
                      var result7 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"had\"");
                      }
                    }
                    if (result7 !== null) {
                      var result8 = parse_space();
                      if (result8 !== null) {
                        var result9 = parse_logical_or_exp();
                        if (result9 !== null) {
                          var result10 = parse_space();
                          if (result10 !== null) {
                            var result11 = parse_typeName();
                            if (result11 !== null) {
                              var result2 = [result4, result5, result6, result7, result8, result9, result10, result11];
                            } else {
                              var result2 = null;
                              pos = savedPos1;
                            }
                          } else {
                            var result2 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result2 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result2 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result2 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result2 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos1;
                }
              } else {
                var result2 = null;
                pos = savedPos1;
              }
              var result3 = result2 !== null
                ? (function(identifier, expr, type) { counter++; return createNode( NODE_TYPE, 'array', identifier, expr, type ) })(result2[1], result2[5], result2[7])
                : null;
              if (result3 !== null) {
                var result1 = result3;
              } else {
                var result1 = null;
                pos = savedPos0;
              }
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_logical_or_exp() {
        var cacheKey = 'logical_or_exp@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result5 = parse_logical_and_exp();
        if (result5 !== null) {
          var result6 = parse_space();
          if (result6 !== null) {
            if (input.substr(pos, 2) === "||") {
              var result7 = "||";
              pos += 2;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("\"||\"");
              }
            }
            if (result7 !== null) {
              var result8 = parse_space();
              if (result8 !== null) {
                var result9 = parse_logical_or_exp();
                if (result9 !== null) {
                  var result3 = [result5, result6, result7, result8, result9];
                } else {
                  var result3 = null;
                  pos = savedPos1;
                }
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
        } else {
          var result3 = null;
          pos = savedPos1;
        }
        var result4 = result3 !== null
          ? (function(laExpr, loExpr) { counter++; return createNode(NODE_OP, OP_LOR, laExpr, loExpr) })(result3[0], result3[4])
          : null;
        if (result4 !== null) {
          var result2 = result4;
        } else {
          var result2 = null;
          pos = savedPos0;
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_logical_and_exp();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_logical_and_exp() {
        var cacheKey = 'logical_and_exp@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result5 = parse_or_expression();
        if (result5 !== null) {
          var result6 = parse_space();
          if (result6 !== null) {
            if (input.substr(pos, 2) === "&&") {
              var result7 = "&&";
              pos += 2;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("\"&&\"");
              }
            }
            if (result7 !== null) {
              var result8 = parse_space();
              if (result8 !== null) {
                var result9 = parse_logical_and_exp();
                if (result9 !== null) {
                  var result3 = [result5, result6, result7, result8, result9];
                } else {
                  var result3 = null;
                  pos = savedPos1;
                }
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
        } else {
          var result3 = null;
          pos = savedPos1;
        }
        var result4 = result3 !== null
          ? (function(orExpr, laExpr) { counter++; return createNode(NODE_OP, OP_LAND, orExpr, laExpr) })(result3[0], result3[4])
          : null;
        if (result4 !== null) {
          var result2 = result4;
        } else {
          var result2 = null;
          pos = savedPos0;
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_or_expression();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_or_expression() {
        var cacheKey = 'or_expression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result5 = parse_xor_expression();
        if (result5 !== null) {
          var result6 = parse_space();
          if (result6 !== null) {
            if (input.substr(pos, 1) === "|") {
              var result7 = "|";
              pos += 1;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("\"|\"");
              }
            }
            if (result7 !== null) {
              var result8 = parse_space();
              if (result8 !== null) {
                var result9 = parse_or_expression();
                if (result9 !== null) {
                  var result3 = [result5, result6, result7, result8, result9];
                } else {
                  var result3 = null;
                  pos = savedPos1;
                }
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
        } else {
          var result3 = null;
          pos = savedPos1;
        }
        var result4 = result3 !== null
          ? (function(xorExpr, orExpr) { counter++; return createNode( NODE_OP, OP_OR, xorExpr, orExpr ) })(result3[0], result3[4])
          : null;
        if (result4 !== null) {
          var result2 = result4;
        } else {
          var result2 = null;
          pos = savedPos0;
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_xor_expression();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_xor_expression() {
        var cacheKey = 'xor_expression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result5 = parse_and_expression();
        if (result5 !== null) {
          var result6 = parse_space();
          if (result6 !== null) {
            if (input.substr(pos, 1) === "^") {
              var result7 = "^";
              pos += 1;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("\"^\"");
              }
            }
            if (result7 !== null) {
              var result8 = parse_space();
              if (result8 !== null) {
                var result9 = parse_xor_expression();
                if (result9 !== null) {
                  var result3 = [result5, result6, result7, result8, result9];
                } else {
                  var result3 = null;
                  pos = savedPos1;
                }
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
        } else {
          var result3 = null;
          pos = savedPos1;
        }
        var result4 = result3 !== null
          ? (function(andExpr, xorExpr) { counter++; return createNode( NODE_OP, OP_XOR, andExpr, xorExpr ) })(result3[0], result3[4])
          : null;
        if (result4 !== null) {
          var result2 = result4;
        } else {
          var result2 = null;
          pos = savedPos0;
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_and_expression();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_and_expression() {
        var cacheKey = 'and_expression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result5 = parse_equality_exp();
        if (result5 !== null) {
          var result6 = parse_space();
          if (result6 !== null) {
            if (input.substr(pos, 1) === "&") {
              var result7 = "&";
              pos += 1;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("\"&\"");
              }
            }
            if (result7 !== null) {
              var result8 = parse_space();
              if (result8 !== null) {
                var result9 = parse_and_expression();
                if (result9 !== null) {
                  var result3 = [result5, result6, result7, result8, result9];
                } else {
                  var result3 = null;
                  pos = savedPos1;
                }
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
        } else {
          var result3 = null;
          pos = savedPos1;
        }
        var result4 = result3 !== null
          ? (function(eqExpr, andExpr) { counter++; return createNode( NODE_OP, OP_AND, eqExpr, andExpr) })(result3[0], result3[4])
          : null;
        if (result4 !== null) {
          var result2 = result4;
        } else {
          var result2 = null;
          pos = savedPos0;
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_equality_exp();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_equality_exp() {
        var cacheKey = 'equality_exp@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        var savedPos3 = pos;
        var result13 = parse_relational_exp();
        if (result13 !== null) {
          var result14 = parse_space();
          if (result14 !== null) {
            if (input.substr(pos, 2) === "==") {
              var result15 = "==";
              pos += 2;
            } else {
              var result15 = null;
              if (reportMatchFailures) {
                matchFailed("\"==\"");
              }
            }
            if (result15 !== null) {
              var result16 = parse_space();
              if (result16 !== null) {
                var result17 = parse_equality_exp();
                if (result17 !== null) {
                  var result11 = [result13, result14, result15, result16, result17];
                } else {
                  var result11 = null;
                  pos = savedPos3;
                }
              } else {
                var result11 = null;
                pos = savedPos3;
              }
            } else {
              var result11 = null;
              pos = savedPos3;
            }
          } else {
            var result11 = null;
            pos = savedPos3;
          }
        } else {
          var result11 = null;
          pos = savedPos3;
        }
        var result12 = result11 !== null
          ? (function(relExpr, eqExpr) { counter++; return createNode(NODE_OP, OP_EQ, relExpr, eqExpr) })(result11[0], result11[4])
          : null;
        if (result12 !== null) {
          var result10 = result12;
        } else {
          var result10 = null;
          pos = savedPos2;
        }
        if (result10 !== null) {
          var result0 = result10;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          var result5 = parse_relational_exp();
          if (result5 !== null) {
            var result6 = parse_space();
            if (result6 !== null) {
              if (input.substr(pos, 2) === "!=") {
                var result7 = "!=";
                pos += 2;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed("\"!=\"");
                }
              }
              if (result7 !== null) {
                var result8 = parse_space();
                if (result8 !== null) {
                  var result9 = parse_equality_exp();
                  if (result9 !== null) {
                    var result3 = [result5, result6, result7, result8, result9];
                  } else {
                    var result3 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result3 = null;
                  pos = savedPos1;
                }
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          var result4 = result3 !== null
            ? (function(relExpr, eqExpr) { counter++; return createNode(NODE_OP, OP_UEQ, relExpr, eqExpr) })(result3[0], result3[4])
            : null;
          if (result4 !== null) {
            var result2 = result4;
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_relational_exp();
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_relational_exp() {
        var cacheKey = 'relational_exp@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos6 = pos;
        var savedPos7 = pos;
        var result29 = parse_add_expression();
        if (result29 !== null) {
          var result30 = parse_space();
          if (result30 !== null) {
            if (input.substr(pos, 1) === "<") {
              var result31 = "<";
              pos += 1;
            } else {
              var result31 = null;
              if (reportMatchFailures) {
                matchFailed("\"<\"");
              }
            }
            if (result31 !== null) {
              var result32 = parse_space();
              if (result32 !== null) {
                var result33 = parse_relational_exp();
                if (result33 !== null) {
                  var result27 = [result29, result30, result31, result32, result33];
                } else {
                  var result27 = null;
                  pos = savedPos7;
                }
              } else {
                var result27 = null;
                pos = savedPos7;
              }
            } else {
              var result27 = null;
              pos = savedPos7;
            }
          } else {
            var result27 = null;
            pos = savedPos7;
          }
        } else {
          var result27 = null;
          pos = savedPos7;
        }
        var result28 = result27 !== null
          ? (function(addExpr, relExpr) { counter++; return createNode(NODE_OP, OP_LT, addExpr, relExpr) })(result27[0], result27[4])
          : null;
        if (result28 !== null) {
          var result26 = result28;
        } else {
          var result26 = null;
          pos = savedPos6;
        }
        if (result26 !== null) {
          var result0 = result26;
        } else {
          var savedPos4 = pos;
          var savedPos5 = pos;
          var result21 = parse_add_expression();
          if (result21 !== null) {
            var result22 = parse_space();
            if (result22 !== null) {
              if (input.substr(pos, 1) === ">") {
                var result23 = ">";
                pos += 1;
              } else {
                var result23 = null;
                if (reportMatchFailures) {
                  matchFailed("\">\"");
                }
              }
              if (result23 !== null) {
                var result24 = parse_space();
                if (result24 !== null) {
                  var result25 = parse_relational_exp();
                  if (result25 !== null) {
                    var result19 = [result21, result22, result23, result24, result25];
                  } else {
                    var result19 = null;
                    pos = savedPos5;
                  }
                } else {
                  var result19 = null;
                  pos = savedPos5;
                }
              } else {
                var result19 = null;
                pos = savedPos5;
              }
            } else {
              var result19 = null;
              pos = savedPos5;
            }
          } else {
            var result19 = null;
            pos = savedPos5;
          }
          var result20 = result19 !== null
            ? (function(addExpr, relExpr) { counter++; return createNode(NODE_OP, OP_GT, addExpr, relExpr) })(result19[0], result19[4])
            : null;
          if (result20 !== null) {
            var result18 = result20;
          } else {
            var result18 = null;
            pos = savedPos4;
          }
          if (result18 !== null) {
            var result0 = result18;
          } else {
            var savedPos2 = pos;
            var savedPos3 = pos;
            var result13 = parse_add_expression();
            if (result13 !== null) {
              var result14 = parse_space();
              if (result14 !== null) {
                if (input.substr(pos, 2) === "<=") {
                  var result15 = "<=";
                  pos += 2;
                } else {
                  var result15 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"<=\"");
                  }
                }
                if (result15 !== null) {
                  var result16 = parse_space();
                  if (result16 !== null) {
                    var result17 = parse_relational_exp();
                    if (result17 !== null) {
                      var result11 = [result13, result14, result15, result16, result17];
                    } else {
                      var result11 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result11 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result11 = null;
                  pos = savedPos3;
                }
              } else {
                var result11 = null;
                pos = savedPos3;
              }
            } else {
              var result11 = null;
              pos = savedPos3;
            }
            var result12 = result11 !== null
              ? (function(addExpr, relExpr) { counter++; return createNode(NODE_OP, OP_LET, addExpr, relExpr) })(result11[0], result11[4])
              : null;
            if (result12 !== null) {
              var result10 = result12;
            } else {
              var result10 = null;
              pos = savedPos2;
            }
            if (result10 !== null) {
              var result0 = result10;
            } else {
              var savedPos0 = pos;
              var savedPos1 = pos;
              var result5 = parse_add_expression();
              if (result5 !== null) {
                var result6 = parse_space();
                if (result6 !== null) {
                  if (input.substr(pos, 2) === ">=") {
                    var result7 = ">=";
                    pos += 2;
                  } else {
                    var result7 = null;
                    if (reportMatchFailures) {
                      matchFailed("\">=\"");
                    }
                  }
                  if (result7 !== null) {
                    var result8 = parse_space();
                    if (result8 !== null) {
                      var result9 = parse_relational_exp();
                      if (result9 !== null) {
                        var result3 = [result5, result6, result7, result8, result9];
                      } else {
                        var result3 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result3 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result3 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result3 = null;
                  pos = savedPos1;
                }
              } else {
                var result3 = null;
                pos = savedPos1;
              }
              var result4 = result3 !== null
                ? (function(addExpr, relExpr) { counter++; return createNode(NODE_OP, OP_GET, addExpr, relExpr) })(result3[0], result3[4])
                : null;
              if (result4 !== null) {
                var result2 = result4;
              } else {
                var result2 = null;
                pos = savedPos0;
              }
              if (result2 !== null) {
                var result0 = result2;
              } else {
                var result1 = parse_add_expression();
                if (result1 !== null) {
                  var result0 = result1;
                } else {
                  var result0 = null;;
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_add_expression() {
        var cacheKey = 'add_expression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        var savedPos3 = pos;
        var result13 = parse_not_expression();
        if (result13 !== null) {
          var result14 = parse_space();
          if (result14 !== null) {
            if (input.substr(pos, 1) === "+") {
              var result15 = "+";
              pos += 1;
            } else {
              var result15 = null;
              if (reportMatchFailures) {
                matchFailed("\"+\"");
              }
            }
            if (result15 !== null) {
              var result16 = parse_space();
              if (result16 !== null) {
                var result17 = parse_add_expression();
                if (result17 !== null) {
                  var result11 = [result13, result14, result15, result16, result17];
                } else {
                  var result11 = null;
                  pos = savedPos3;
                }
              } else {
                var result11 = null;
                pos = savedPos3;
              }
            } else {
              var result11 = null;
              pos = savedPos3;
            }
          } else {
            var result11 = null;
            pos = savedPos3;
          }
        } else {
          var result11 = null;
          pos = savedPos3;
        }
        var result12 = result11 !== null
          ? (function(notExpr, addExpr) { counter++; return createNode(NODE_OP, OP_ADD, notExpr, addExpr) })(result11[0], result11[4])
          : null;
        if (result12 !== null) {
          var result10 = result12;
        } else {
          var result10 = null;
          pos = savedPos2;
        }
        if (result10 !== null) {
          var result0 = result10;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          var result5 = parse_not_expression();
          if (result5 !== null) {
            var result6 = parse_space();
            if (result6 !== null) {
              if (input.substr(pos, 1) === "-") {
                var result7 = "-";
                pos += 1;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed("\"-\"");
                }
              }
              if (result7 !== null) {
                var result8 = parse_space();
                if (result8 !== null) {
                  var result9 = parse_add_expression();
                  if (result9 !== null) {
                    var result3 = [result5, result6, result7, result8, result9];
                  } else {
                    var result3 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result3 = null;
                  pos = savedPos1;
                }
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          var result4 = result3 !== null
            ? (function(notExpr, addExpr) { counter++; return createNode(NODE_OP, OP_SUB, notExpr, addExpr ) })(result3[0], result3[4])
            : null;
          if (result4 !== null) {
            var result2 = result4;
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_not_expression();
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_not_expression() {
        var cacheKey = 'not_expression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result5 = parse_not_op();
        if (result5 !== null) {
          var result6 = parse_space();
          if (result6 !== null) {
            var result7 = parse_mul_expression();
            if (result7 !== null) {
              var result3 = [result5, result6, result7];
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
        } else {
          var result3 = null;
          pos = savedPos1;
        }
        var result4 = result3 !== null
          ? (function(notExpr, mulExpr) {counter++; return createNode(NODE_OP, notExpr, mulExpr)})(result3[0], result3[2])
          : null;
        if (result4 !== null) {
          var result2 = result4;
        } else {
          var result2 = null;
          pos = savedPos0;
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_mul_expression();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_mul_expression() {
        var cacheKey = 'mul_expression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos4 = pos;
        var savedPos5 = pos;
        var result21 = parse_unary_expression();
        if (result21 !== null) {
          var result22 = parse_space();
          if (result22 !== null) {
            if (input.substr(pos, 1) === "*") {
              var result23 = "*";
              pos += 1;
            } else {
              var result23 = null;
              if (reportMatchFailures) {
                matchFailed("\"*\"");
              }
            }
            if (result23 !== null) {
              var result24 = parse_space();
              if (result24 !== null) {
                var result25 = parse_mul_expression();
                if (result25 !== null) {
                  var result19 = [result21, result22, result23, result24, result25];
                } else {
                  var result19 = null;
                  pos = savedPos5;
                }
              } else {
                var result19 = null;
                pos = savedPos5;
              }
            } else {
              var result19 = null;
              pos = savedPos5;
            }
          } else {
            var result19 = null;
            pos = savedPos5;
          }
        } else {
          var result19 = null;
          pos = savedPos5;
        }
        var result20 = result19 !== null
          ? (function(unExpr, mulExpr) { counter++; return createNode(NODE_OP, OP_MUL, unExpr, mulExpr) })(result19[0], result19[4])
          : null;
        if (result20 !== null) {
          var result18 = result20;
        } else {
          var result18 = null;
          pos = savedPos4;
        }
        if (result18 !== null) {
          var result0 = result18;
        } else {
          var savedPos2 = pos;
          var savedPos3 = pos;
          var result13 = parse_unary_expression();
          if (result13 !== null) {
            var result14 = parse_space();
            if (result14 !== null) {
              if (input.substr(pos, 1) === "/") {
                var result15 = "/";
                pos += 1;
              } else {
                var result15 = null;
                if (reportMatchFailures) {
                  matchFailed("\"/\"");
                }
              }
              if (result15 !== null) {
                var result16 = parse_space();
                if (result16 !== null) {
                  var result17 = parse_mul_expression();
                  if (result17 !== null) {
                    var result11 = [result13, result14, result15, result16, result17];
                  } else {
                    var result11 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result11 = null;
                  pos = savedPos3;
                }
              } else {
                var result11 = null;
                pos = savedPos3;
              }
            } else {
              var result11 = null;
              pos = savedPos3;
            }
          } else {
            var result11 = null;
            pos = savedPos3;
          }
          var result12 = result11 !== null
            ? (function(unExpr, mulExpr) { counter++; return createNode(NODE_OP, OP_DIV, unExpr, mulExpr) })(result11[0], result11[4])
            : null;
          if (result12 !== null) {
            var result10 = result12;
          } else {
            var result10 = null;
            pos = savedPos2;
          }
          if (result10 !== null) {
            var result0 = result10;
          } else {
            var savedPos0 = pos;
            var savedPos1 = pos;
            var result5 = parse_unary_expression();
            if (result5 !== null) {
              var result6 = parse_space();
              if (result6 !== null) {
                if (input.substr(pos, 1) === "%") {
                  var result7 = "%";
                  pos += 1;
                } else {
                  var result7 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"%\"");
                  }
                }
                if (result7 !== null) {
                  var result8 = parse_space();
                  if (result8 !== null) {
                    var result9 = parse_mul_expression();
                    if (result9 !== null) {
                      var result3 = [result5, result6, result7, result8, result9];
                    } else {
                      var result3 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result3 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result3 = null;
                  pos = savedPos1;
                }
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
            var result4 = result3 !== null
              ? (function(unExpr, mulExpr) { counter++; return createNode(NODE_OP, OP_MOD, unExpr, mulExpr) })(result3[0], result3[4])
              : null;
            if (result4 !== null) {
              var result2 = result4;
            } else {
              var result2 = null;
              pos = savedPos0;
            }
            if (result2 !== null) {
              var result0 = result2;
            } else {
              var result1 = parse_unary_expression();
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_unary_expression() {
        var cacheKey = 'unary_expression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result5 = parse_neg_op();
        if (result5 !== null) {
          var result6 = parse_primitive_expression();
          if (result6 !== null) {
            var result3 = [result5, result6];
          } else {
            var result3 = null;
            pos = savedPos1;
          }
        } else {
          var result3 = null;
          pos = savedPos1;
        }
        var result4 = result3 !== null
          ? (function(unOP, primExpr) { counter++; return createNode(NODE_OP, unOP, primExpr ) })(result3[0], result3[1])
          : null;
        if (result4 !== null) {
          var result2 = result4;
        } else {
          var result2 = null;
          pos = savedPos0;
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_primitive_expression();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_primitive_expression() {
        var cacheKey = 'primitive_expression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos6 = pos;
        if (input.substr(pos).match(/^[0-9]/) !== null) {
          var result23 = input.charAt(pos);
          pos++;
        } else {
          var result23 = null;
          if (reportMatchFailures) {
            matchFailed("[0-9]");
          }
        }
        if (result23 !== null) {
          var result21 = [];
          while (result23 !== null) {
            result21.push(result23);
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result23 = input.charAt(pos);
              pos++;
            } else {
              var result23 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
          }
        } else {
          var result21 = null;
        }
        var result22 = result21 !== null
          ? (function(num) { counter++; return createNode( NODE_CONST, num.join(""), 'number' ) })(result21)
          : null;
        if (result22 !== null) {
          var result20 = result22;
        } else {
          var result20 = null;
          pos = savedPos6;
        }
        if (result20 !== null) {
          var result0 = result20;
        } else {
          var savedPos4 = pos;
          var savedPos5 = pos;
          if (input.substr(pos).match(/^[']/) !== null) {
            var result17 = input.charAt(pos);
            pos++;
          } else {
            var result17 = null;
            if (reportMatchFailures) {
              matchFailed("[']");
            }
          }
          if (result17 !== null) {
            if (input.substr(pos).match(/^[^']/) !== null) {
              var result18 = input.charAt(pos);
              pos++;
            } else {
              var result18 = null;
              if (reportMatchFailures) {
                matchFailed("[^']");
              }
            }
            if (result18 !== null) {
              if (input.substr(pos).match(/^[']/) !== null) {
                var result19 = input.charAt(pos);
                pos++;
              } else {
                var result19 = null;
                if (reportMatchFailures) {
                  matchFailed("[']");
                }
              }
              if (result19 !== null) {
                var result15 = [result17, result18, result19];
              } else {
                var result15 = null;
                pos = savedPos5;
              }
            } else {
              var result15 = null;
              pos = savedPos5;
            }
          } else {
            var result15 = null;
            pos = savedPos5;
          }
          var result16 = result15 !== null
            ? (function(letter) {counter++; return createNode( NODE_CONST, letter[1], 'letter' ) })(result15)
            : null;
          if (result16 !== null) {
            var result14 = result16;
          } else {
            var result14 = null;
            pos = savedPos4;
          }
          if (result14 !== null) {
            var result0 = result14;
          } else {
            var savedPos3 = pos;
            var result12 = parse_function();
            var result13 = result12 !== null
              ? (function(fun) {return fun})(result12)
              : null;
            if (result13 !== null) {
              var result11 = result13;
            } else {
              var result11 = null;
              pos = savedPos3;
            }
            if (result11 !== null) {
              var result0 = result11;
            } else {
              var savedPos2 = pos;
              var result9 = parse_argument();
              var result10 = result9 !== null
                ? (function(arg) {return arg})(result9)
                : null;
              if (result10 !== null) {
                var result8 = result10;
              } else {
                var result8 = null;
                pos = savedPos2;
              }
              if (result8 !== null) {
                var result0 = result8;
              } else {
                var savedPos1 = pos;
                var result6 = parse_string();
                var result7 = result6 !== null
                  ? (function(str) {return str})(result6)
                  : null;
                if (result7 !== null) {
                  var result5 = result7;
                } else {
                  var result5 = null;
                  pos = savedPos1;
                }
                if (result5 !== null) {
                  var result0 = result5;
                } else {
                  var savedPos0 = pos;
                  if (input.substr(pos, 1) === "(") {
                    var result2 = "(";
                    pos += 1;
                  } else {
                    var result2 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"(\"");
                    }
                  }
                  if (result2 !== null) {
                    var result3 = parse_logical_or_exp();
                    if (result3 !== null) {
                      if (input.substr(pos, 1) === ")") {
                        var result4 = ")";
                        pos += 1;
                      } else {
                        var result4 = null;
                        if (reportMatchFailures) {
                          matchFailed("\")\"");
                        }
                      }
                      if (result4 !== null) {
                        var result1 = [result2, result3, result4];
                      } else {
                        var result1 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                  if (result1 !== null) {
                    var result0 = result1;
                  } else {
                    var result0 = null;;
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_typeName() {
        var cacheKey = 'typeName@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 6) === "letter") {
          var result3 = "letter";
          pos += 6;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"letter\"");
          }
        }
        if (result3 !== null) {
          var result0 = result3;
        } else {
          if (input.substr(pos, 6) === "number") {
            var result2 = "number";
            pos += 6;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"number\"");
            }
          }
          if (result2 !== null) {
            var result0 = result2;
          } else {
            if (input.substr(pos, 8) === "sentence") {
              var result1 = "sentence";
              pos += 8;
            } else {
              var result1 = null;
              if (reportMatchFailures) {
                matchFailed("\"sentence\"");
              }
            }
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_spiderType() {
        var cacheKey = 'spiderType@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 6) === "spider") {
          var result1 = "spider";
          pos += 6;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"spider\"");
          }
        }
        var result2 = result1 !== null
          ? (function(type) { return type })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_id() {
        var cacheKey = 'id@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos).match(/^[A-Za-z_]/) !== null) {
          var result6 = input.charAt(pos);
          pos++;
        } else {
          var result6 = null;
          if (reportMatchFailures) {
            matchFailed("[A-Za-z_]");
          }
        }
        if (result6 !== null) {
          var result3 = [];
          while (result6 !== null) {
            result3.push(result6);
            if (input.substr(pos).match(/^[A-Za-z_]/) !== null) {
              var result6 = input.charAt(pos);
              pos++;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("[A-Za-z_]");
              }
            }
          }
        } else {
          var result3 = null;
        }
        if (result3 !== null) {
          var result4 = [];
          if (input.substr(pos).match(/^[0-9A-Za-z_]/) !== null) {
            var result5 = input.charAt(pos);
            pos++;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("[0-9A-Za-z_]");
            }
          }
          while (result5 !== null) {
            result4.push(result5);
            if (input.substr(pos).match(/^[0-9A-Za-z_]/) !== null) {
              var result5 = input.charAt(pos);
              pos++;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9A-Za-z_]");
              }
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(identifier, idd) { return identifier.join("")+idd.join("") })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_argument() {
        var cacheKey = 'argument@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result5 = parse_id();
        if (result5 !== null) {
          if (input.substr(pos, 2) === "'s") {
            var result6 = "'s";
            pos += 2;
          } else {
            var result6 = null;
            if (reportMatchFailures) {
              matchFailed("\"'s\"");
            }
          }
          if (result6 !== null) {
            var result7 = parse_space();
            if (result7 !== null) {
              var result8 = parse_logical_or_exp();
              if (result8 !== null) {
                var result9 = parse_space();
                if (result9 !== null) {
                  if (input.substr(pos, 5) === "piece") {
                    var result10 = "piece";
                    pos += 5;
                  } else {
                    var result10 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"piece\"");
                    }
                  }
                  if (result10 !== null) {
                    var result3 = [result5, result6, result7, result8, result9, result10];
                  } else {
                    var result3 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result3 = null;
                  pos = savedPos1;
                }
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
        } else {
          var result3 = null;
          pos = savedPos1;
        }
        var result4 = result3 !== null
          ? (function(identifier, expr) { return [identifier, expr]})(result3[0], result3[3])
          : null;
        if (result4 !== null) {
          var result2 = result4;
        } else {
          var result2 = null;
          pos = savedPos0;
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_id();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_string() {
        var cacheKey = 'string@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos).match(/^["]/) !== null) {
          var result3 = input.charAt(pos);
          pos++;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("[\"]");
          }
        }
        if (result3 !== null) {
          var result4 = [];
          if (input.substr(pos).match(/^[^"]/) !== null) {
            var result6 = input.charAt(pos);
            pos++;
          } else {
            var result6 = null;
            if (reportMatchFailures) {
              matchFailed("[^\"]");
            }
          }
          while (result6 !== null) {
            result4.push(result6);
            if (input.substr(pos).match(/^[^"]/) !== null) {
              var result6 = input.charAt(pos);
              pos++;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("[^\"]");
              }
            }
          }
          if (result4 !== null) {
            if (input.substr(pos).match(/^["]/) !== null) {
              var result5 = input.charAt(pos);
              pos++;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("[\"]");
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(str) { return str.join("") })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_condition() {
        var cacheKey = 'condition@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "(") {
          var result3 = "(";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"(\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_space();
          if (result4 !== null) {
            var result5 = parse_logical_or_exp();
            if (result5 !== null) {
              var result6 = parse_space();
              if (result6 !== null) {
                if (input.substr(pos, 1) === ")") {
                  var result7 = ")";
                  pos += 1;
                } else {
                  var result7 = null;
                  if (reportMatchFailures) {
                    matchFailed("\")\"");
                  }
                }
                if (result7 !== null) {
                  var result1 = [result3, result4, result5, result6, result7];
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(expr) { return expr })(result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_function_name() {
        var cacheKey = 'function_name@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos3 = pos;
        if (input.substr(pos, 6) === "was a ") {
          var result11 = "was a ";
          pos += 6;
        } else {
          var result11 = null;
          if (reportMatchFailures) {
            matchFailed("\"was a \"");
          }
        }
        var result12 = result11 !== null
          ? (function(funcName) { return funcName })(result11)
          : null;
        if (result12 !== null) {
          var result10 = result12;
        } else {
          var result10 = null;
          pos = savedPos3;
        }
        if (result10 !== null) {
          var result0 = result10;
        } else {
          var savedPos2 = pos;
          if (input.substr(pos, 7) === "became ") {
            var result8 = "became ";
            pos += 7;
          } else {
            var result8 = null;
            if (reportMatchFailures) {
              matchFailed("\"became \"");
            }
          }
          var result9 = result8 !== null
            ? (function(funcName) { return funcName })(result8)
            : null;
          if (result9 !== null) {
            var result7 = result9;
          } else {
            var result7 = null;
            pos = savedPos2;
          }
          if (result7 !== null) {
            var result0 = result7;
          } else {
            var savedPos1 = pos;
            if (input.substr(pos, 5) === "drank") {
              var result5 = "drank";
              pos += 5;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"drank\"");
              }
            }
            var result6 = result5 !== null
              ? (function(funcName) { return funcName })(result5)
              : null;
            if (result6 !== null) {
              var result4 = result6;
            } else {
              var result4 = null;
              pos = savedPos1;
            }
            if (result4 !== null) {
              var result0 = result4;
            } else {
              var savedPos0 = pos;
              if (input.substr(pos, 3) === "ate") {
                var result2 = "ate";
                pos += 3;
              } else {
                var result2 = null;
                if (reportMatchFailures) {
                  matchFailed("\"ate\"");
                }
              }
              var result3 = result2 !== null
                ? (function(funcName) { return funcName })(result2)
                : null;
              if (result3 !== null) {
                var result1 = result3;
              } else {
                var result1 = null;
                pos = savedPos0;
              }
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_function_input() {
        var cacheKey = 'function_input@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 8) === "what was") {
          var result1 = "what was";
          pos += 8;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"what was\"");
          }
        }
        var result2 = result1 !== null
          ? (function(funcName) { return funcName })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_function_output() {
        var cacheKey = 'function_output@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        if (input.substr(pos, 4) === "said") {
          var result8 = "said";
          pos += 4;
        } else {
          var result8 = null;
          if (reportMatchFailures) {
            matchFailed("\"said\"");
          }
        }
        var result9 = result8 !== null
          ? (function(funcName) { return funcName })(result8)
          : null;
        if (result9 !== null) {
          var result7 = result9;
        } else {
          var result7 = null;
          pos = savedPos2;
        }
        if (result7 !== null) {
          var result0 = result7;
        } else {
          var savedPos1 = pos;
          if (input.substr(pos, 7) === "thought") {
            var result5 = "thought";
            pos += 7;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("\"thought\"");
            }
          }
          var result6 = result5 !== null
            ? (function(funcName) { return funcName })(result5)
            : null;
          if (result6 !== null) {
            var result4 = result6;
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          if (result4 !== null) {
            var result0 = result4;
          } else {
            var savedPos0 = pos;
            if (input.substr(pos, 5) === "spoke") {
              var result2 = "spoke";
              pos += 5;
            } else {
              var result2 = null;
              if (reportMatchFailures) {
                matchFailed("\"spoke\"");
              }
            }
            var result3 = result2 !== null
              ? (function(funcName) { return funcName })(result2)
              : null;
            if (result3 !== null) {
              var result1 = result3;
            } else {
              var result1 = null;
              pos = savedPos0;
            }
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ifFun() {
        var cacheKey = 'ifFun@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 6) === "either") {
          var result2 = "either";
          pos += 6;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"either\"");
          }
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          if (input.substr(pos, 7) === "perhaps") {
            var result1 = "perhaps";
            pos += 7;
          } else {
            var result1 = null;
            if (reportMatchFailures) {
              matchFailed("\"perhaps\"");
            }
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_unsure() {
        var cacheKey = 'unsure@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 22) === "Alice was unsure which") {
          var result2 = "Alice was unsure which";
          pos += 22;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"Alice was unsure which\"");
          }
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          if (input.substr(pos, 16) === "Alice was unsure") {
            var result1 = "Alice was unsure";
            pos += 16;
          } else {
            var result1 = null;
            if (reportMatchFailures) {
              matchFailed("\"Alice was unsure\"");
            }
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_newLine() {
        var cacheKey = 'newLine@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos4 = pos;
        var savedPos5 = pos;
        var result27 = parse_space();
        if (result27 !== null) {
          if (input.substr(pos, 3) === "too") {
            var result28 = "too";
            pos += 3;
          } else {
            var result28 = null;
            if (reportMatchFailures) {
              matchFailed("\"too\"");
            }
          }
          if (result28 !== null) {
            var result29 = parse_space();
            if (result29 !== null) {
              if (input.substr(pos).match(/^[.]/) !== null) {
                var result30 = input.charAt(pos);
                pos++;
              } else {
                var result30 = null;
                if (reportMatchFailures) {
                  matchFailed("[.]");
                }
              }
              if (result30 !== null) {
                var result31 = parse_space();
                if (result31 !== null) {
                  var result32 = [];
                  if (input.substr(pos).match(/^[\n]/) !== null) {
                    var result33 = input.charAt(pos);
                    pos++;
                  } else {
                    var result33 = null;
                    if (reportMatchFailures) {
                      matchFailed("[\\n]");
                    }
                  }
                  while (result33 !== null) {
                    result32.push(result33);
                    if (input.substr(pos).match(/^[\n]/) !== null) {
                      var result33 = input.charAt(pos);
                      pos++;
                    } else {
                      var result33 = null;
                      if (reportMatchFailures) {
                        matchFailed("[\\n]");
                      }
                    }
                  }
                  if (result32 !== null) {
                    var result25 = [result27, result28, result29, result30, result31, result32];
                  } else {
                    var result25 = null;
                    pos = savedPos5;
                  }
                } else {
                  var result25 = null;
                  pos = savedPos5;
                }
              } else {
                var result25 = null;
                pos = savedPos5;
              }
            } else {
              var result25 = null;
              pos = savedPos5;
            }
          } else {
            var result25 = null;
            pos = savedPos5;
          }
        } else {
          var result25 = null;
          pos = savedPos5;
        }
        var result26 = result25 !== null
          ? (function() {return 1})()
          : null;
        if (result26 !== null) {
          var result24 = result26;
        } else {
          var result24 = null;
          pos = savedPos4;
        }
        if (result24 !== null) {
          var result0 = result24;
        } else {
          var savedPos2 = pos;
          var savedPos3 = pos;
          var result16 = parse_space();
          if (result16 !== null) {
            var result17 = [];
            if (input.substr(pos).match(/^[\n	]/) !== null) {
              var result23 = input.charAt(pos);
              pos++;
            } else {
              var result23 = null;
              if (reportMatchFailures) {
                matchFailed("[\\n	]");
              }
            }
            while (result23 !== null) {
              result17.push(result23);
              if (input.substr(pos).match(/^[\n	]/) !== null) {
                var result23 = input.charAt(pos);
                pos++;
              } else {
                var result23 = null;
                if (reportMatchFailures) {
                  matchFailed("[\\n	]");
                }
              }
            }
            if (result17 !== null) {
              var result18 = parse_space();
              if (result18 !== null) {
                if (input.substr(pos).match(/^[.,?]/) !== null) {
                  var result19 = input.charAt(pos);
                  pos++;
                } else {
                  var result19 = null;
                  if (reportMatchFailures) {
                    matchFailed("[.,?]");
                  }
                }
                if (result19 !== null) {
                  var result20 = parse_space();
                  if (result20 !== null) {
                    var result21 = [];
                    if (input.substr(pos).match(/^[\n	]/) !== null) {
                      var result22 = input.charAt(pos);
                      pos++;
                    } else {
                      var result22 = null;
                      if (reportMatchFailures) {
                        matchFailed("[\\n	]");
                      }
                    }
                    while (result22 !== null) {
                      result21.push(result22);
                      if (input.substr(pos).match(/^[\n	]/) !== null) {
                        var result22 = input.charAt(pos);
                        pos++;
                      } else {
                        var result22 = null;
                        if (reportMatchFailures) {
                          matchFailed("[\\n	]");
                        }
                      }
                    }
                    if (result21 !== null) {
                      var result14 = [result16, result17, result18, result19, result20, result21];
                    } else {
                      var result14 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result14 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result14 = null;
                  pos = savedPos3;
                }
              } else {
                var result14 = null;
                pos = savedPos3;
              }
            } else {
              var result14 = null;
              pos = savedPos3;
            }
          } else {
            var result14 = null;
            pos = savedPos3;
          }
          var result15 = result14 !== null
            ? (function() {return 2 })()
            : null;
          if (result15 !== null) {
            var result13 = result15;
          } else {
            var result13 = null;
            pos = savedPos2;
          }
          if (result13 !== null) {
            var result0 = result13;
          } else {
            var savedPos1 = pos;
            var result8 = parse_space();
            if (result8 !== null) {
              if (input.substr(pos, 3) === "and") {
                var result9 = "and";
                pos += 3;
              } else {
                var result9 = null;
                if (reportMatchFailures) {
                  matchFailed("\"and\"");
                }
              }
              if (result9 !== null) {
                var result10 = parse_space();
                if (result10 !== null) {
                  var result11 = [];
                  if (input.substr(pos).match(/^[\n]/) !== null) {
                    var result12 = input.charAt(pos);
                    pos++;
                  } else {
                    var result12 = null;
                    if (reportMatchFailures) {
                      matchFailed("[\\n]");
                    }
                  }
                  while (result12 !== null) {
                    result11.push(result12);
                    if (input.substr(pos).match(/^[\n]/) !== null) {
                      var result12 = input.charAt(pos);
                      pos++;
                    } else {
                      var result12 = null;
                      if (reportMatchFailures) {
                        matchFailed("[\\n]");
                      }
                    }
                  }
                  if (result11 !== null) {
                    var result7 = [result8, result9, result10, result11];
                  } else {
                    var result7 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result7 = null;
                  pos = savedPos1;
                }
              } else {
                var result7 = null;
                pos = savedPos1;
              }
            } else {
              var result7 = null;
              pos = savedPos1;
            }
            if (result7 !== null) {
              var result0 = result7;
            } else {
              var savedPos0 = pos;
              var result2 = parse_space();
              if (result2 !== null) {
                if (input.substr(pos, 3) === "but") {
                  var result3 = "but";
                  pos += 3;
                } else {
                  var result3 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"but\"");
                  }
                }
                if (result3 !== null) {
                  var result4 = parse_space();
                  if (result4 !== null) {
                    var result5 = [];
                    if (input.substr(pos).match(/^[\n]/) !== null) {
                      var result6 = input.charAt(pos);
                      pos++;
                    } else {
                      var result6 = null;
                      if (reportMatchFailures) {
                        matchFailed("[\\n]");
                      }
                    }
                    while (result6 !== null) {
                      result5.push(result6);
                      if (input.substr(pos).match(/^[\n]/) !== null) {
                        var result6 = input.charAt(pos);
                        pos++;
                      } else {
                        var result6 = null;
                        if (reportMatchFailures) {
                          matchFailed("[\\n]");
                        }
                      }
                    }
                    if (result5 !== null) {
                      var result1 = [result2, result3, result4, result5];
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_space() {
        var cacheKey = 'space@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = [];
        if (input.substr(pos).match(/^[ 	]/) !== null) {
          var result3 = input.charAt(pos);
          pos++;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("[ 	]");
          }
        }
        while (result3 !== null) {
          result1.push(result3);
          if (input.substr(pos).match(/^[ 	]/) !== null) {
            var result3 = input.charAt(pos);
            pos++;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("[ 	]");
            }
          }
        }
        var result2 = result1 !== null
          ? (function() { return })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_separator() {
        var cacheKey = 'separator@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos12 = pos;
        if (input.substr(pos).match(/^[,]/) !== null) {
          var result38 = input.charAt(pos);
          pos++;
        } else {
          var result38 = null;
          if (reportMatchFailures) {
            matchFailed("[,]");
          }
        }
        if (result38 !== null) {
          var result39 = parse_space();
          if (result39 !== null) {
            if (input.substr(pos).match(/^[\n]/) !== null) {
              var result40 = input.charAt(pos);
              pos++;
            } else {
              var result40 = null;
              if (reportMatchFailures) {
                matchFailed("[\\n]");
              }
            }
            if (result40 !== null) {
              var result37 = [result38, result39, result40];
            } else {
              var result37 = null;
              pos = savedPos12;
            }
          } else {
            var result37 = null;
            pos = savedPos12;
          }
        } else {
          var result37 = null;
          pos = savedPos12;
        }
        if (result37 !== null) {
          var result0 = result37;
        } else {
          var savedPos11 = pos;
          if (input.substr(pos).match(/^[,]/) !== null) {
            var result35 = input.charAt(pos);
            pos++;
          } else {
            var result35 = null;
            if (reportMatchFailures) {
              matchFailed("[,]");
            }
          }
          var result36 = result35 !== null
            ? (function() {return 7})()
            : null;
          if (result36 !== null) {
            var result34 = result36;
          } else {
            var result34 = null;
            pos = savedPos11;
          }
          if (result34 !== null) {
            var result0 = result34;
          } else {
            var savedPos10 = pos;
            if (input.substr(pos).match(/^[?]/) !== null) {
              var result32 = input.charAt(pos);
              pos++;
            } else {
              var result32 = null;
              if (reportMatchFailures) {
                matchFailed("[?]");
              }
            }
            if (result32 !== null) {
              if (input.substr(pos).match(/^[ ]/) !== null) {
                var result33 = input.charAt(pos);
                pos++;
              } else {
                var result33 = null;
                if (reportMatchFailures) {
                  matchFailed("[ ]");
                }
              }
              if (result33 !== null) {
                var result31 = [result32, result33];
              } else {
                var result31 = null;
                pos = savedPos10;
              }
            } else {
              var result31 = null;
              pos = savedPos10;
            }
            if (result31 !== null) {
              var result0 = result31;
            } else {
              var savedPos8 = pos;
              var savedPos9 = pos;
              if (input.substr(pos).match(/^[ ]/) !== null) {
                var result28 = input.charAt(pos);
                pos++;
              } else {
                var result28 = null;
                if (reportMatchFailures) {
                  matchFailed("[ ]");
                }
              }
              if (result28 !== null) {
                if (input.substr(pos, 4) === "then") {
                  var result29 = "then";
                  pos += 4;
                } else {
                  var result29 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"then\"");
                  }
                }
                if (result29 !== null) {
                  if (input.substr(pos).match(/^[ ]/) !== null) {
                    var result30 = input.charAt(pos);
                    pos++;
                  } else {
                    var result30 = null;
                    if (reportMatchFailures) {
                      matchFailed("[ ]");
                    }
                  }
                  if (result30 !== null) {
                    var result26 = [result28, result29, result30];
                  } else {
                    var result26 = null;
                    pos = savedPos9;
                  }
                } else {
                  var result26 = null;
                  pos = savedPos9;
                }
              } else {
                var result26 = null;
                pos = savedPos9;
              }
              var result27 = result26 !== null
                ? (function() {return 8})()
                : null;
              if (result27 !== null) {
                var result25 = result27;
              } else {
                var result25 = null;
                pos = savedPos8;
              }
              if (result25 !== null) {
                var result0 = result25;
              } else {
                var savedPos6 = pos;
                var savedPos7 = pos;
                if (input.substr(pos).match(/^[ ]/) !== null) {
                  var result22 = input.charAt(pos);
                  pos++;
                } else {
                  var result22 = null;
                  if (reportMatchFailures) {
                    matchFailed("[ ]");
                  }
                }
                if (result22 !== null) {
                  if (input.substr(pos, 2) === "or") {
                    var result23 = "or";
                    pos += 2;
                  } else {
                    var result23 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"or\"");
                    }
                  }
                  if (result23 !== null) {
                    if (input.substr(pos).match(/^[ ]/) !== null) {
                      var result24 = input.charAt(pos);
                      pos++;
                    } else {
                      var result24 = null;
                      if (reportMatchFailures) {
                        matchFailed("[ ]");
                      }
                    }
                    if (result24 !== null) {
                      var result20 = [result22, result23, result24];
                    } else {
                      var result20 = null;
                      pos = savedPos7;
                    }
                  } else {
                    var result20 = null;
                    pos = savedPos7;
                  }
                } else {
                  var result20 = null;
                  pos = savedPos7;
                }
                var result21 = result20 !== null
                  ? (function() {return 9})()
                  : null;
                if (result21 !== null) {
                  var result19 = result21;
                } else {
                  var result19 = null;
                  pos = savedPos6;
                }
                if (result19 !== null) {
                  var result0 = result19;
                } else {
                  var savedPos4 = pos;
                  var savedPos5 = pos;
                  if (input.substr(pos).match(/^[ ]/) !== null) {
                    var result16 = input.charAt(pos);
                    pos++;
                  } else {
                    var result16 = null;
                    if (reportMatchFailures) {
                      matchFailed("[ ]");
                    }
                  }
                  if (result16 !== null) {
                    if (input.substr(pos, 3) === "and") {
                      var result17 = "and";
                      pos += 3;
                    } else {
                      var result17 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"and\"");
                      }
                    }
                    if (result17 !== null) {
                      if (input.substr(pos).match(/^[ ]/) !== null) {
                        var result18 = input.charAt(pos);
                        pos++;
                      } else {
                        var result18 = null;
                        if (reportMatchFailures) {
                          matchFailed("[ ]");
                        }
                      }
                      if (result18 !== null) {
                        var result14 = [result16, result17, result18];
                      } else {
                        var result14 = null;
                        pos = savedPos5;
                      }
                    } else {
                      var result14 = null;
                      pos = savedPos5;
                    }
                  } else {
                    var result14 = null;
                    pos = savedPos5;
                  }
                  var result15 = result14 !== null
                    ? (function() {return 10})()
                    : null;
                  if (result15 !== null) {
                    var result13 = result15;
                  } else {
                    var result13 = null;
                    pos = savedPos4;
                  }
                  if (result13 !== null) {
                    var result0 = result13;
                  } else {
                    var savedPos2 = pos;
                    var savedPos3 = pos;
                    if (input.substr(pos).match(/^[ ]/) !== null) {
                      var result10 = input.charAt(pos);
                      pos++;
                    } else {
                      var result10 = null;
                      if (reportMatchFailures) {
                        matchFailed("[ ]");
                      }
                    }
                    if (result10 !== null) {
                      if (input.substr(pos, 3) === "too") {
                        var result11 = "too";
                        pos += 3;
                      } else {
                        var result11 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"too\"");
                        }
                      }
                      if (result11 !== null) {
                        if (input.substr(pos).match(/^[ ]/) !== null) {
                          var result12 = input.charAt(pos);
                          pos++;
                        } else {
                          var result12 = null;
                          if (reportMatchFailures) {
                            matchFailed("[ ]");
                          }
                        }
                        if (result12 !== null) {
                          var result8 = [result10, result11, result12];
                        } else {
                          var result8 = null;
                          pos = savedPos3;
                        }
                      } else {
                        var result8 = null;
                        pos = savedPos3;
                      }
                    } else {
                      var result8 = null;
                      pos = savedPos3;
                    }
                    var result9 = result8 !== null
                      ? (function() {return 11})()
                      : null;
                    if (result9 !== null) {
                      var result7 = result9;
                    } else {
                      var result7 = null;
                      pos = savedPos2;
                    }
                    if (result7 !== null) {
                      var result0 = result7;
                    } else {
                      var savedPos0 = pos;
                      var savedPos1 = pos;
                      if (input.substr(pos).match(/^[ ]/) !== null) {
                        var result4 = input.charAt(pos);
                        pos++;
                      } else {
                        var result4 = null;
                        if (reportMatchFailures) {
                          matchFailed("[ ]");
                        }
                      }
                      if (result4 !== null) {
                        if (input.substr(pos, 3) === "but") {
                          var result5 = "but";
                          pos += 3;
                        } else {
                          var result5 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"but\"");
                          }
                        }
                        if (result5 !== null) {
                          if (input.substr(pos).match(/^[ ]/) !== null) {
                            var result6 = input.charAt(pos);
                            pos++;
                          } else {
                            var result6 = null;
                            if (reportMatchFailures) {
                              matchFailed("[ ]");
                            }
                          }
                          if (result6 !== null) {
                            var result2 = [result4, result5, result6];
                          } else {
                            var result2 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result2 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result2 = null;
                        pos = savedPos1;
                      }
                      var result3 = result2 !== null
                        ? (function() {return 12})()
                        : null;
                      if (result3 !== null) {
                        var result1 = result3;
                      } else {
                        var result1 = null;
                        pos = savedPos0;
                      }
                      if (result1 !== null) {
                        var result0 = result1;
                      } else {
                        var result0 = null;;
                      };
                    };
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_not_op() {
        var cacheKey = 'not_op@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "~") {
          var result1 = "~";
          pos += 1;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"~\"");
          }
        }
        var result2 = result1 !== null
          ? (function() { return OP_NOT })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_neg_op() {
        var cacheKey = 'neg_op@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "-") {
          var result1 = "-";
          pos += 1;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"-\"");
          }
        }
        var result2 = result1 !== null
          ? (function() { return OP_NEG })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          failuresExpected.sort();
          
          var lastFailure = null;
          var failuresExpectedUnique = [];
          for (var i = 0; i < failuresExpected.length; i++) {
            if (failuresExpected[i] !== lastFailure) {
              failuresExpectedUnique.push(failuresExpected[i]);
              lastFailure = failuresExpected[i];
            }
          }
          
          switch (failuresExpectedUnique.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpectedUnique[0];
            default:
              return failuresExpectedUnique.slice(0, failuresExpectedUnique.length - 1).join(', ')
                + ' or '
                + failuresExpectedUnique[failuresExpectedUnique.length - 1];
          }
        }
        
        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quote(input.charAt(actualPos))
          : 'end of input';
        
        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      

	
      

		counter = 0
      

	
      

		function NODE() {
      

			var id;
      

			var type;
      

			var value;
      

			var children;
      

		};
      

	
      

		//Management functions
      

		function createNode( type, value, children ) {
      

			var n = new NODE();
      

			n.id = counter;
      

			n.type = type;
      

			n.value = value;	
      

			n.children = new Array();
      

			
      

			for( var i = 2; i < arguments.length; i++ )
      

				n.children.push( arguments[i] );
      

				
      

			return n;
      

		};
      

	
      

		NODE_OP			= 0
      

		NODE_VAR		= 1
      

		NODE_CONST		= 2
      

		NODE_TYPE		= 3
      

		NODE_RETURN 	= 4
      

		NODE_IO			= 5
      

		NODE_LOOP 		= 6
      

		NODE_LOOP_END 	= 7
      

	    NODE_FUN 		= 8
      

	    NODE_FUN_DEF 	= 9
      

	    NODE_IF			= 10
      

	    NODE_ELSE       = 11
      

	    NODE_FUN_CALL   = 12
      

	    NODE_LOOK_DEF   = 13
      

	    NODE_IF_BODY    = 14
      

	
      

		OP_NONE		= -1
      

		OP_ADD      = 1
      

		OP_OR		= 2
      

		OP_XOR		= 3
      

		OP_AND		= 4
      

		OP_SUB		= 5
      

		OP_MUL		= 6
      

		OP_DIV		= 7
      

		OP_MOD		= 8
      

		OP_NOT		= 9
      

		OP_NEG		= 10
      

		OP_LOR		= 11
      

		OP_LAND		= 12
      

		OP_EQ		= 13
      

		OP_UEQ		= 14
      

		OP_LT		= 15
      

		OP_GT		= 16
      

		OP_LET		= 17
      

		OP_GET		= 18
      

	
      

	
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})()
