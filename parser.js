module.exports = (function(){
  /* Generated by PEG.js 0.6.2 (http://pegjs.majda.cz/). */
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "EOF": parse_EOF,
        "add_expression": parse_add_expression,
        "and_expression": parse_and_expression,
        "assignment": parse_assignment,
        "expression": parse_expression,
        "function_name": parse_function_name,
        "id": parse_id,
        "mul_expression": parse_mul_expression,
        "newLine": parse_newLine,
        "or_expression": parse_or_expression,
        "primitive_expression": parse_primitive_expression,
        "separator": parse_separator,
        "space": parse_space,
        "start": parse_start,
        "typeName": parse_typeName,
        "un_op": parse_un_op,
        "unary_expression": parse_unary_expression,
        "xor_expression": parse_xor_expression
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "start";
      }
      
      var pos = 0;
      var reportMatchFailures = true;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        
        if (charCode <= 0xFF) {
          var escapeChar = 'x';
          var length = 2;
        } else {
          var escapeChar = 'u';
          var length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')            // backslash
          .replace(/"/g, '\\"')              // closing quote character
          .replace(/\r/g, '\\r')             // carriage return
          .replace(/\n/g, '\\n')             // line feed
          .replace(/[\x80-\uFFFF]/g, escape) // non-ASCII characters
          + '"';
      }
      
      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }
        
        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }
        
        rightmostMatchFailuresExpected.push(failure);
      }
      
      function parse_start() {
        var cacheKey = 'start@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos4 = pos;
        var savedPos5 = pos;
        var result16 = parse_assignment();
        if (result16 !== null) {
          var result17 = parse_separator();
          if (result17 !== null) {
            var result18 = parse_start();
            if (result18 !== null) {
              var result14 = [result16, result17, result18];
            } else {
              var result14 = null;
              pos = savedPos5;
            }
          } else {
            var result14 = null;
            pos = savedPos5;
          }
        } else {
          var result14 = null;
          pos = savedPos5;
        }
        var result15 = result14 !== null
          ? (function(single, sep, list) {return createNode( NODE_OP, OP_NONE, list, single ) })(result14[0], result14[1], result14[2])
          : null;
        if (result15 !== null) {
          var result13 = result15;
        } else {
          var result13 = null;
          pos = savedPos4;
        }
        if (result13 !== null) {
          var result0 = result13;
        } else {
          var savedPos2 = pos;
          var savedPos3 = pos;
          var result10 = parse_assignment();
          if (result10 !== null) {
            var result11 = parse_newLine();
            if (result11 !== null) {
              var result12 = parse_start();
              if (result12 !== null) {
                var result8 = [result10, result11, result12];
              } else {
                var result8 = null;
                pos = savedPos3;
              }
            } else {
              var result8 = null;
              pos = savedPos3;
            }
          } else {
            var result8 = null;
            pos = savedPos3;
          }
          var result9 = result8 !== null
            ? (function(single, enter, list) {return createNode( NODE_OP, OP_NONE, list, single ) })(result8[0], result8[1], result8[2])
            : null;
          if (result9 !== null) {
            var result7 = result9;
          } else {
            var result7 = null;
            pos = savedPos2;
          }
          if (result7 !== null) {
            var result0 = result7;
          } else {
            var result6 = parse_EOF();
            if (result6 !== null) {
              var result0 = result6;
            } else {
              var savedPos0 = pos;
              var savedPos1 = pos;
              if (input.substr(pos).match(/^[\n]/) !== null) {
                var result4 = input.charAt(pos);
                pos++;
              } else {
                var result4 = null;
                if (reportMatchFailures) {
                  matchFailed("[\\n]");
                }
              }
              if (result4 !== null) {
                var result5 = parse_start();
                if (result5 !== null) {
                  var result2 = [result4, result5];
                } else {
                  var result2 = null;
                  pos = savedPos1;
                }
              } else {
                var result2 = null;
                pos = savedPos1;
              }
              var result3 = result2 !== null
                ? (function(list) {return createNode( NODE_OP, OP_NONE, list ) })(result2[1])
                : null;
              if (result3 !== null) {
                var result1 = result3;
              } else {
                var result1 = null;
                pos = savedPos0;
              }
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_assignment() {
        var cacheKey = 'assignment@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos4 = pos;
        var savedPos5 = pos;
        var result17 = parse_id();
        if (result17 !== null) {
          if (input.substr(pos, 1) === " ") {
            var result18 = " ";
            pos += 1;
          } else {
            var result18 = null;
            if (reportMatchFailures) {
              matchFailed("\" \"");
            }
          }
          if (result18 !== null) {
            var result19 = parse_function_name();
            if (result19 !== null) {
              if (input.substr(pos, 1) === " ") {
                var result20 = " ";
                pos += 1;
              } else {
                var result20 = null;
                if (reportMatchFailures) {
                  matchFailed("\" \"");
                }
              }
              if (result20 !== null) {
                var result21 = parse_typeName();
                if (result21 !== null) {
                  var result15 = [result17, result18, result19, result20, result21];
                } else {
                  var result15 = null;
                  pos = savedPos5;
                }
              } else {
                var result15 = null;
                pos = savedPos5;
              }
            } else {
              var result15 = null;
              pos = savedPos5;
            }
          } else {
            var result15 = null;
            pos = savedPos5;
          }
        } else {
          var result15 = null;
          pos = savedPos5;
        }
        var result16 = result15 !== null
          ? (function(identifier, name, type) { return createNode( NODE_OP, name, identifier, type ) })(result15[0], result15[2], result15[4])
          : null;
        if (result16 !== null) {
          var result14 = result16;
        } else {
          var result14 = null;
          pos = savedPos4;
        }
        if (result14 !== null) {
          var result0 = result14;
        } else {
          var savedPos2 = pos;
          var savedPos3 = pos;
          var result10 = parse_id();
          if (result10 !== null) {
            if (input.substr(pos, 1) === " ") {
              var result11 = " ";
              pos += 1;
            } else {
              var result11 = null;
              if (reportMatchFailures) {
                matchFailed("\" \"");
              }
            }
            if (result11 !== null) {
              var result12 = parse_function_name();
              if (result12 !== null) {
                var result13 = parse_expression();
                if (result13 !== null) {
                  var result8 = [result10, result11, result12, result13];
                } else {
                  var result8 = null;
                  pos = savedPos3;
                }
              } else {
                var result8 = null;
                pos = savedPos3;
              }
            } else {
              var result8 = null;
              pos = savedPos3;
            }
          } else {
            var result8 = null;
            pos = savedPos3;
          }
          var result9 = result8 !== null
            ? (function(identifier, name, expr) { return createNode( NODE_OP, name, identifier, expr ) })(result8[0], result8[2], result8[3])
            : null;
          if (result9 !== null) {
            var result7 = result9;
          } else {
            var result7 = null;
            pos = savedPos2;
          }
          if (result7 !== null) {
            var result0 = result7;
          } else {
            var savedPos0 = pos;
            var savedPos1 = pos;
            var result5 = parse_id();
            if (result5 !== null) {
              if (input.substr(pos, 6) === " spoke") {
                var result6 = " spoke";
                pos += 6;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\" spoke\"");
                }
              }
              if (result6 !== null) {
                var result3 = [result5, result6];
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
            var result4 = result3 !== null
              ? (function(identifier) { return createNode( NODE_OP, name, identifier ) })(result3[0])
              : null;
            if (result4 !== null) {
              var result2 = result4;
            } else {
              var result2 = null;
              pos = savedPos0;
            }
            if (result2 !== null) {
              var result0 = result2;
            } else {
              var result1 = parse_EOF();
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_expression() {
        var cacheKey = 'expression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result0 = parse_or_expression();
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_or_expression() {
        var cacheKey = 'or_expression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result5 = parse_xor_expression();
        if (result5 !== null) {
          var result6 = parse_space();
          if (result6 !== null) {
            if (input.substr(pos, 1) === "|") {
              var result7 = "|";
              pos += 1;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("\"|\"");
              }
            }
            if (result7 !== null) {
              var result8 = parse_space();
              if (result8 !== null) {
                var result9 = parse_or_expression();
                if (result9 !== null) {
                  var result3 = [result5, result6, result7, result8, result9];
                } else {
                  var result3 = null;
                  pos = savedPos1;
                }
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
        } else {
          var result3 = null;
          pos = savedPos1;
        }
        var result4 = result3 !== null
          ? (function(xorExpr, sp, sp, orExpr) { return createNode( NODE_OP, OP_OR, orExpr, xorExpr ) })(result3[0], result3[1], result3[3], result3[4])
          : null;
        if (result4 !== null) {
          var result2 = result4;
        } else {
          var result2 = null;
          pos = savedPos0;
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_xor_expression();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_xor_expression() {
        var cacheKey = 'xor_expression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result5 = parse_and_expression();
        if (result5 !== null) {
          var result6 = parse_space();
          if (result6 !== null) {
            if (input.substr(pos, 1) === "^") {
              var result7 = "^";
              pos += 1;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("\"^\"");
              }
            }
            if (result7 !== null) {
              var result8 = parse_space();
              if (result8 !== null) {
                var result9 = parse_xor_expression();
                if (result9 !== null) {
                  var result3 = [result5, result6, result7, result8, result9];
                } else {
                  var result3 = null;
                  pos = savedPos1;
                }
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
        } else {
          var result3 = null;
          pos = savedPos1;
        }
        var result4 = result3 !== null
          ? (function(andExpr, sp, sp, xorExpr) { return createNode( NODE_OP, OP_XOR, xorExpr, andExpr ) })(result3[0], result3[1], result3[3], result3[4])
          : null;
        if (result4 !== null) {
          var result2 = result4;
        } else {
          var result2 = null;
          pos = savedPos0;
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_and_expression();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_and_expression() {
        var cacheKey = 'and_expression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result5 = parse_add_expression();
        if (result5 !== null) {
          var result6 = parse_space();
          if (result6 !== null) {
            if (input.substr(pos, 1) === "&") {
              var result7 = "&";
              pos += 1;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("\"&\"");
              }
            }
            if (result7 !== null) {
              var result8 = parse_space();
              if (result8 !== null) {
                var result9 = parse_and_expression();
                if (result9 !== null) {
                  var result3 = [result5, result6, result7, result8, result9];
                } else {
                  var result3 = null;
                  pos = savedPos1;
                }
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
        } else {
          var result3 = null;
          pos = savedPos1;
        }
        var result4 = result3 !== null
          ? (function(addExpr, sp, sp, andExpr) { return createNode( NODE_OP, OP_AND, andExpr, addExpr) })(result3[0], result3[1], result3[3], result3[4])
          : null;
        if (result4 !== null) {
          var result2 = result4;
        } else {
          var result2 = null;
          pos = savedPos0;
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_add_expression();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_add_expression() {
        var cacheKey = 'add_expression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        var savedPos3 = pos;
        var result13 = parse_mul_expression();
        if (result13 !== null) {
          var result14 = parse_space();
          if (result14 !== null) {
            if (input.substr(pos, 1) === "+") {
              var result15 = "+";
              pos += 1;
            } else {
              var result15 = null;
              if (reportMatchFailures) {
                matchFailed("\"+\"");
              }
            }
            if (result15 !== null) {
              var result16 = parse_space();
              if (result16 !== null) {
                var result17 = parse_add_expression();
                if (result17 !== null) {
                  var result11 = [result13, result14, result15, result16, result17];
                } else {
                  var result11 = null;
                  pos = savedPos3;
                }
              } else {
                var result11 = null;
                pos = savedPos3;
              }
            } else {
              var result11 = null;
              pos = savedPos3;
            }
          } else {
            var result11 = null;
            pos = savedPos3;
          }
        } else {
          var result11 = null;
          pos = savedPos3;
        }
        var result12 = result11 !== null
          ? (function(mulExpr, sp, sp, addExpr) { return createNode(NODE_OP, OP_ADD, addExpr, mulExpr) })(result11[0], result11[1], result11[3], result11[4])
          : null;
        if (result12 !== null) {
          var result10 = result12;
        } else {
          var result10 = null;
          pos = savedPos2;
        }
        if (result10 !== null) {
          var result0 = result10;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          var result5 = parse_mul_expression();
          if (result5 !== null) {
            var result6 = parse_space();
            if (result6 !== null) {
              if (input.substr(pos, 1) === "-") {
                var result7 = "-";
                pos += 1;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed("\"-\"");
                }
              }
              if (result7 !== null) {
                var result8 = parse_space();
                if (result8 !== null) {
                  var result9 = parse_add_expression();
                  if (result9 !== null) {
                    var result3 = [result5, result6, result7, result8, result9];
                  } else {
                    var result3 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result3 = null;
                  pos = savedPos1;
                }
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          var result4 = result3 !== null
            ? (function(mulExpr, sp, sp, addExpr) { return createNode(NODE_OP, OP_SUB, addExpr, mulExpr) })(result3[0], result3[1], result3[3], result3[4])
            : null;
          if (result4 !== null) {
            var result2 = result4;
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_mul_expression();
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_mul_expression() {
        var cacheKey = 'mul_expression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos4 = pos;
        var savedPos5 = pos;
        var result21 = parse_unary_expression();
        if (result21 !== null) {
          var result22 = parse_space();
          if (result22 !== null) {
            if (input.substr(pos, 1) === "*") {
              var result23 = "*";
              pos += 1;
            } else {
              var result23 = null;
              if (reportMatchFailures) {
                matchFailed("\"*\"");
              }
            }
            if (result23 !== null) {
              var result24 = parse_space();
              if (result24 !== null) {
                var result25 = parse_mul_expression();
                if (result25 !== null) {
                  var result19 = [result21, result22, result23, result24, result25];
                } else {
                  var result19 = null;
                  pos = savedPos5;
                }
              } else {
                var result19 = null;
                pos = savedPos5;
              }
            } else {
              var result19 = null;
              pos = savedPos5;
            }
          } else {
            var result19 = null;
            pos = savedPos5;
          }
        } else {
          var result19 = null;
          pos = savedPos5;
        }
        var result20 = result19 !== null
          ? (function(unExpr, sp, sp, mulExpr) { return createNode(NODE_OP, OP_MUL, mulExpr, unExpr) })(result19[0], result19[1], result19[3], result19[4])
          : null;
        if (result20 !== null) {
          var result18 = result20;
        } else {
          var result18 = null;
          pos = savedPos4;
        }
        if (result18 !== null) {
          var result0 = result18;
        } else {
          var savedPos2 = pos;
          var savedPos3 = pos;
          var result13 = parse_unary_expression();
          if (result13 !== null) {
            var result14 = parse_space();
            if (result14 !== null) {
              if (input.substr(pos, 1) === "/") {
                var result15 = "/";
                pos += 1;
              } else {
                var result15 = null;
                if (reportMatchFailures) {
                  matchFailed("\"/\"");
                }
              }
              if (result15 !== null) {
                var result16 = parse_space();
                if (result16 !== null) {
                  var result17 = parse_mul_expression();
                  if (result17 !== null) {
                    var result11 = [result13, result14, result15, result16, result17];
                  } else {
                    var result11 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result11 = null;
                  pos = savedPos3;
                }
              } else {
                var result11 = null;
                pos = savedPos3;
              }
            } else {
              var result11 = null;
              pos = savedPos3;
            }
          } else {
            var result11 = null;
            pos = savedPos3;
          }
          var result12 = result11 !== null
            ? (function(unExpr, sp, sp, mulExpr) { return createNode(NODE_OP, OP_DIV, mulExpr, unExpr) })(result11[0], result11[1], result11[3], result11[4])
            : null;
          if (result12 !== null) {
            var result10 = result12;
          } else {
            var result10 = null;
            pos = savedPos2;
          }
          if (result10 !== null) {
            var result0 = result10;
          } else {
            var savedPos0 = pos;
            var savedPos1 = pos;
            var result5 = parse_unary_expression();
            if (result5 !== null) {
              var result6 = parse_space();
              if (result6 !== null) {
                if (input.substr(pos, 1) === "%") {
                  var result7 = "%";
                  pos += 1;
                } else {
                  var result7 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"%\"");
                  }
                }
                if (result7 !== null) {
                  var result8 = parse_space();
                  if (result8 !== null) {
                    var result9 = parse_mul_expression();
                    if (result9 !== null) {
                      var result3 = [result5, result6, result7, result8, result9];
                    } else {
                      var result3 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result3 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result3 = null;
                  pos = savedPos1;
                }
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
            var result4 = result3 !== null
              ? (function(unExpr, sp, sp, mulExpr) { return createNode(NODE_OP, OP_MOD, mulExpr, unExpr) })(result3[0], result3[1], result3[3], result3[4])
              : null;
            if (result4 !== null) {
              var result2 = result4;
            } else {
              var result2 = null;
              pos = savedPos0;
            }
            if (result2 !== null) {
              var result0 = result2;
            } else {
              var result1 = parse_unary_expression();
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_unary_expression() {
        var cacheKey = 'unary_expression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result5 = parse_un_op();
        if (result5 !== null) {
          var result6 = parse_primitive_expression();
          if (result6 !== null) {
            var result3 = [result5, result6];
          } else {
            var result3 = null;
            pos = savedPos1;
          }
        } else {
          var result3 = null;
          pos = savedPos1;
        }
        var result4 = result3 !== null
          ? (function(unOP, primExpr) { return createNode(NODE_OP, OP_UNR, unOP, primExpr ) })(result3[0], result3[1])
          : null;
        if (result4 !== null) {
          var result2 = result4;
        } else {
          var result2 = null;
          pos = savedPos0;
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_primitive_expression();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_primitive_expression() {
        var cacheKey = 'primitive_expression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos4 = pos;
        if (input.substr(pos).match(/^[0-9]/) !== null) {
          var result16 = input.charAt(pos);
          pos++;
        } else {
          var result16 = null;
          if (reportMatchFailures) {
            matchFailed("[0-9]");
          }
        }
        if (result16 !== null) {
          var result14 = [];
          while (result16 !== null) {
            result14.push(result16);
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result16 = input.charAt(pos);
              pos++;
            } else {
              var result16 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
          }
        } else {
          var result14 = null;
        }
        var result15 = result14 !== null
          ? (function(num) { return createNode( NODE_CONST, num.join("") ) })(result14)
          : null;
        if (result15 !== null) {
          var result13 = result15;
        } else {
          var result13 = null;
          pos = savedPos4;
        }
        if (result13 !== null) {
          var result0 = result13;
        } else {
          var savedPos2 = pos;
          var savedPos3 = pos;
          if (input.substr(pos).match(/^[']/) !== null) {
            var result10 = input.charAt(pos);
            pos++;
          } else {
            var result10 = null;
            if (reportMatchFailures) {
              matchFailed("[']");
            }
          }
          if (result10 !== null) {
            if (input.substr(pos).match(/^[A-Za-z]/) !== null) {
              var result11 = input.charAt(pos);
              pos++;
            } else {
              var result11 = null;
              if (reportMatchFailures) {
                matchFailed("[A-Za-z]");
              }
            }
            if (result11 !== null) {
              if (input.substr(pos).match(/^[']/) !== null) {
                var result12 = input.charAt(pos);
                pos++;
              } else {
                var result12 = null;
                if (reportMatchFailures) {
                  matchFailed("[']");
                }
              }
              if (result12 !== null) {
                var result8 = [result10, result11, result12];
              } else {
                var result8 = null;
                pos = savedPos3;
              }
            } else {
              var result8 = null;
              pos = savedPos3;
            }
          } else {
            var result8 = null;
            pos = savedPos3;
          }
          var result9 = result8 !== null
            ? (function(letter) { return createNode( NODE_CONST, letter ) })(result8)
            : null;
          if (result9 !== null) {
            var result7 = result9;
          } else {
            var result7 = null;
            pos = savedPos2;
          }
          if (result7 !== null) {
            var result0 = result7;
          } else {
            var result6 = parse_id();
            if (result6 !== null) {
              var result0 = result6;
            } else {
              var savedPos1 = pos;
              if (input.substr(pos, 1) === "(") {
                var result3 = "(";
                pos += 1;
              } else {
                var result3 = null;
                if (reportMatchFailures) {
                  matchFailed("\"(\"");
                }
              }
              if (result3 !== null) {
                var result4 = parse_expression();
                if (result4 !== null) {
                  if (input.substr(pos, 1) === ")") {
                    var result5 = ")";
                    pos += 1;
                  } else {
                    var result5 = null;
                    if (reportMatchFailures) {
                      matchFailed("\")\"");
                    }
                  }
                  if (result5 !== null) {
                    var result2 = [result3, result4, result5];
                  } else {
                    var result2 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos1;
                }
              } else {
                var result2 = null;
                pos = savedPos1;
              }
              if (result2 !== null) {
                var result0 = result2;
              } else {
                var savedPos0 = pos;
                var result1 = [];
                if (result1 !== null) {
                  var result0 = result1;
                } else {
                  var result0 = null;;
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_typeName() {
        var cacheKey = 'typeName@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos1 = pos;
        if (input.substr(pos, 6) === "letter") {
          var result5 = "letter";
          pos += 6;
        } else {
          var result5 = null;
          if (reportMatchFailures) {
            matchFailed("\"letter\"");
          }
        }
        var result6 = result5 !== null
          ? (function(type) { return createNode( NODE_TYPE, type) })(result5)
          : null;
        if (result6 !== null) {
          var result4 = result6;
        } else {
          var result4 = null;
          pos = savedPos1;
        }
        if (result4 !== null) {
          var result0 = result4;
        } else {
          var savedPos0 = pos;
          if (input.substr(pos, 6) === "number") {
            var result2 = "number";
            pos += 6;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"number\"");
            }
          }
          var result3 = result2 !== null
            ? (function(type) { return createNode( NODE_TYPE, type) })(result2)
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_id() {
        var cacheKey = 'id@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[A-Za-z_]/) !== null) {
          var result3 = input.charAt(pos);
          pos++;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("[A-Za-z_]");
          }
        }
        if (result3 !== null) {
          var result1 = [];
          while (result3 !== null) {
            result1.push(result3);
            if (input.substr(pos).match(/^[A-Za-z_]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("[A-Za-z_]");
              }
            }
          }
        } else {
          var result1 = null;
        }
        var result2 = result1 !== null
          ? (function(identifier) { return identifier.join("") })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_function_name() {
        var cacheKey = 'function_name@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos3 = pos;
        if (input.substr(pos, 6) === "was a ") {
          var result11 = "was a ";
          pos += 6;
        } else {
          var result11 = null;
          if (reportMatchFailures) {
            matchFailed("\"was a \"");
          }
        }
        var result12 = result11 !== null
          ? (function(funcName) { return funcName })(result11)
          : null;
        if (result12 !== null) {
          var result10 = result12;
        } else {
          var result10 = null;
          pos = savedPos3;
        }
        if (result10 !== null) {
          var result0 = result10;
        } else {
          var savedPos2 = pos;
          if (input.substr(pos, 7) === "became ") {
            var result8 = "became ";
            pos += 7;
          } else {
            var result8 = null;
            if (reportMatchFailures) {
              matchFailed("\"became \"");
            }
          }
          var result9 = result8 !== null
            ? (function(funcName) { return funcName })(result8)
            : null;
          if (result9 !== null) {
            var result7 = result9;
          } else {
            var result7 = null;
            pos = savedPos2;
          }
          if (result7 !== null) {
            var result0 = result7;
          } else {
            var savedPos1 = pos;
            if (input.substr(pos, 5) === "drank") {
              var result5 = "drank";
              pos += 5;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"drank\"");
              }
            }
            var result6 = result5 !== null
              ? (function(funcName) { return funcName })(result5)
              : null;
            if (result6 !== null) {
              var result4 = result6;
            } else {
              var result4 = null;
              pos = savedPos1;
            }
            if (result4 !== null) {
              var result0 = result4;
            } else {
              var savedPos0 = pos;
              if (input.substr(pos, 3) === "ate") {
                var result2 = "ate";
                pos += 3;
              } else {
                var result2 = null;
                if (reportMatchFailures) {
                  matchFailed("\"ate\"");
                }
              }
              var result3 = result2 !== null
                ? (function(funcName) { return funcName })(result2)
                : null;
              if (result3 !== null) {
                var result1 = result3;
              } else {
                var result1 = null;
                pos = savedPos0;
              }
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_newLine() {
        var cacheKey = 'newLine@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos6 = pos;
        var savedPos7 = pos;
        if (input.substr(pos).match(/^[ ]/) !== null) {
          var result19 = input.charAt(pos);
          pos++;
        } else {
          var result19 = null;
          if (reportMatchFailures) {
            matchFailed("[ ]");
          }
        }
        if (result19 !== null) {
          if (input.substr(pos, 3) === "too") {
            var result20 = "too";
            pos += 3;
          } else {
            var result20 = null;
            if (reportMatchFailures) {
              matchFailed("\"too\"");
            }
          }
          if (result20 !== null) {
            if (input.substr(pos).match(/^[.]/) !== null) {
              var result21 = input.charAt(pos);
              pos++;
            } else {
              var result21 = null;
              if (reportMatchFailures) {
                matchFailed("[.]");
              }
            }
            if (result21 !== null) {
              if (input.substr(pos).match(/^[\n]/) !== null) {
                var result22 = input.charAt(pos);
                pos++;
              } else {
                var result22 = null;
                if (reportMatchFailures) {
                  matchFailed("[\\n]");
                }
              }
              if (result22 !== null) {
                var result17 = [result19, result20, result21, result22];
              } else {
                var result17 = null;
                pos = savedPos7;
              }
            } else {
              var result17 = null;
              pos = savedPos7;
            }
          } else {
            var result17 = null;
            pos = savedPos7;
          }
        } else {
          var result17 = null;
          pos = savedPos7;
        }
        var result18 = result17 !== null
          ? (function(sep) { return createNode( NODE_OP, OP_NONE) })(result17)
          : null;
        if (result18 !== null) {
          var result16 = result18;
        } else {
          var result16 = null;
          pos = savedPos6;
        }
        if (result16 !== null) {
          var result0 = result16;
        } else {
          var savedPos4 = pos;
          var savedPos5 = pos;
          if (input.substr(pos).match(/^[.]/) !== null) {
            var result14 = input.charAt(pos);
            pos++;
          } else {
            var result14 = null;
            if (reportMatchFailures) {
              matchFailed("[.]");
            }
          }
          if (result14 !== null) {
            var result15 = parse_EOF();
            if (result15 !== null) {
              var result12 = [result14, result15];
            } else {
              var result12 = null;
              pos = savedPos5;
            }
          } else {
            var result12 = null;
            pos = savedPos5;
          }
          var result13 = result12 !== null
            ? (function(sep) { return createNode( NODE_OP, OP_NONE) })(result12)
            : null;
          if (result13 !== null) {
            var result11 = result13;
          } else {
            var result11 = null;
            pos = savedPos4;
          }
          if (result11 !== null) {
            var result0 = result11;
          } else {
            var savedPos2 = pos;
            var savedPos3 = pos;
            if (input.substr(pos).match(/^[.]/) !== null) {
              var result9 = input.charAt(pos);
              pos++;
            } else {
              var result9 = null;
              if (reportMatchFailures) {
                matchFailed("[.]");
              }
            }
            if (result9 !== null) {
              if (input.substr(pos).match(/^[\n]/) !== null) {
                var result10 = input.charAt(pos);
                pos++;
              } else {
                var result10 = null;
                if (reportMatchFailures) {
                  matchFailed("[\\n]");
                }
              }
              if (result10 !== null) {
                var result7 = [result9, result10];
              } else {
                var result7 = null;
                pos = savedPos3;
              }
            } else {
              var result7 = null;
              pos = savedPos3;
            }
            var result8 = result7 !== null
              ? (function(sep) { return createNode( NODE_OP, OP_NONE) })(result7)
              : null;
            if (result8 !== null) {
              var result6 = result8;
            } else {
              var result6 = null;
              pos = savedPos2;
            }
            if (result6 !== null) {
              var result0 = result6;
            } else {
              var savedPos0 = pos;
              var savedPos1 = pos;
              if (input.substr(pos).match(/^[,]/) !== null) {
                var result4 = input.charAt(pos);
                pos++;
              } else {
                var result4 = null;
                if (reportMatchFailures) {
                  matchFailed("[,]");
                }
              }
              if (result4 !== null) {
                if (input.substr(pos).match(/^[\n]/) !== null) {
                  var result5 = input.charAt(pos);
                  pos++;
                } else {
                  var result5 = null;
                  if (reportMatchFailures) {
                    matchFailed("[\\n]");
                  }
                }
                if (result5 !== null) {
                  var result2 = [result4, result5];
                } else {
                  var result2 = null;
                  pos = savedPos1;
                }
              } else {
                var result2 = null;
                pos = savedPos1;
              }
              var result3 = result2 !== null
                ? (function(sep) { return createNode( NODE_OP, OP_NONE) })(result2)
                : null;
              if (result3 !== null) {
                var result1 = result3;
              } else {
                var result1 = null;
                pos = savedPos0;
              }
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_space() {
        var cacheKey = 'space@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 1) === " ") {
          var result2 = " ";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\" \"");
          }
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          if (input.substr(pos, 0) === "") {
            var result1 = "";
            pos += 0;
          } else {
            var result1 = null;
            if (reportMatchFailures) {
              matchFailed("\"\"");
            }
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_separator() {
        var cacheKey = 'separator@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos10 = pos;
        var savedPos11 = pos;
        if (input.substr(pos).match(/^[,]/) !== null) {
          var result34 = input.charAt(pos);
          pos++;
        } else {
          var result34 = null;
          if (reportMatchFailures) {
            matchFailed("[,]");
          }
        }
        if (result34 !== null) {
          if (input.substr(pos).match(/^[ ]/) !== null) {
            var result35 = input.charAt(pos);
            pos++;
          } else {
            var result35 = null;
            if (reportMatchFailures) {
              matchFailed("[ ]");
            }
          }
          if (result35 !== null) {
            var result32 = [result34, result35];
          } else {
            var result32 = null;
            pos = savedPos11;
          }
        } else {
          var result32 = null;
          pos = savedPos11;
        }
        var result33 = result32 !== null
          ? (function(sep) { return createNode( NODE_OP, OP_NONE) })(result32)
          : null;
        if (result33 !== null) {
          var result31 = result33;
        } else {
          var result31 = null;
          pos = savedPos10;
        }
        if (result31 !== null) {
          var result0 = result31;
        } else {
          var savedPos8 = pos;
          var savedPos9 = pos;
          if (input.substr(pos).match(/^[ ]/) !== null) {
            var result28 = input.charAt(pos);
            pos++;
          } else {
            var result28 = null;
            if (reportMatchFailures) {
              matchFailed("[ ]");
            }
          }
          if (result28 !== null) {
            if (input.substr(pos, 4) === "then") {
              var result29 = "then";
              pos += 4;
            } else {
              var result29 = null;
              if (reportMatchFailures) {
                matchFailed("\"then\"");
              }
            }
            if (result29 !== null) {
              if (input.substr(pos).match(/^[ ]/) !== null) {
                var result30 = input.charAt(pos);
                pos++;
              } else {
                var result30 = null;
                if (reportMatchFailures) {
                  matchFailed("[ ]");
                }
              }
              if (result30 !== null) {
                var result26 = [result28, result29, result30];
              } else {
                var result26 = null;
                pos = savedPos9;
              }
            } else {
              var result26 = null;
              pos = savedPos9;
            }
          } else {
            var result26 = null;
            pos = savedPos9;
          }
          var result27 = result26 !== null
            ? (function(sep) { return createNode( NODE_OP, OP_NONE) })(result26)
            : null;
          if (result27 !== null) {
            var result25 = result27;
          } else {
            var result25 = null;
            pos = savedPos8;
          }
          if (result25 !== null) {
            var result0 = result25;
          } else {
            var savedPos6 = pos;
            var savedPos7 = pos;
            if (input.substr(pos).match(/^[ ]/) !== null) {
              var result22 = input.charAt(pos);
              pos++;
            } else {
              var result22 = null;
              if (reportMatchFailures) {
                matchFailed("[ ]");
              }
            }
            if (result22 !== null) {
              if (input.substr(pos, 2) === "or") {
                var result23 = "or";
                pos += 2;
              } else {
                var result23 = null;
                if (reportMatchFailures) {
                  matchFailed("\"or\"");
                }
              }
              if (result23 !== null) {
                if (input.substr(pos).match(/^[ ]/) !== null) {
                  var result24 = input.charAt(pos);
                  pos++;
                } else {
                  var result24 = null;
                  if (reportMatchFailures) {
                    matchFailed("[ ]");
                  }
                }
                if (result24 !== null) {
                  var result20 = [result22, result23, result24];
                } else {
                  var result20 = null;
                  pos = savedPos7;
                }
              } else {
                var result20 = null;
                pos = savedPos7;
              }
            } else {
              var result20 = null;
              pos = savedPos7;
            }
            var result21 = result20 !== null
              ? (function(sep) { return createNode( NODE_OP, OP_NONE) })(result20)
              : null;
            if (result21 !== null) {
              var result19 = result21;
            } else {
              var result19 = null;
              pos = savedPos6;
            }
            if (result19 !== null) {
              var result0 = result19;
            } else {
              var savedPos4 = pos;
              var savedPos5 = pos;
              if (input.substr(pos).match(/^[ ]/) !== null) {
                var result16 = input.charAt(pos);
                pos++;
              } else {
                var result16 = null;
                if (reportMatchFailures) {
                  matchFailed("[ ]");
                }
              }
              if (result16 !== null) {
                if (input.substr(pos, 3) === "and") {
                  var result17 = "and";
                  pos += 3;
                } else {
                  var result17 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"and\"");
                  }
                }
                if (result17 !== null) {
                  if (input.substr(pos).match(/^[ ]/) !== null) {
                    var result18 = input.charAt(pos);
                    pos++;
                  } else {
                    var result18 = null;
                    if (reportMatchFailures) {
                      matchFailed("[ ]");
                    }
                  }
                  if (result18 !== null) {
                    var result14 = [result16, result17, result18];
                  } else {
                    var result14 = null;
                    pos = savedPos5;
                  }
                } else {
                  var result14 = null;
                  pos = savedPos5;
                }
              } else {
                var result14 = null;
                pos = savedPos5;
              }
              var result15 = result14 !== null
                ? (function(sep) { return createNode( NODE_OP, OP_NONE) })(result14)
                : null;
              if (result15 !== null) {
                var result13 = result15;
              } else {
                var result13 = null;
                pos = savedPos4;
              }
              if (result13 !== null) {
                var result0 = result13;
              } else {
                var savedPos2 = pos;
                var savedPos3 = pos;
                if (input.substr(pos).match(/^[ ]/) !== null) {
                  var result10 = input.charAt(pos);
                  pos++;
                } else {
                  var result10 = null;
                  if (reportMatchFailures) {
                    matchFailed("[ ]");
                  }
                }
                if (result10 !== null) {
                  if (input.substr(pos, 3) === "too") {
                    var result11 = "too";
                    pos += 3;
                  } else {
                    var result11 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"too\"");
                    }
                  }
                  if (result11 !== null) {
                    if (input.substr(pos).match(/^[ ]/) !== null) {
                      var result12 = input.charAt(pos);
                      pos++;
                    } else {
                      var result12 = null;
                      if (reportMatchFailures) {
                        matchFailed("[ ]");
                      }
                    }
                    if (result12 !== null) {
                      var result8 = [result10, result11, result12];
                    } else {
                      var result8 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result8 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result8 = null;
                  pos = savedPos3;
                }
                var result9 = result8 !== null
                  ? (function(sep) { return createNode( NODE_OP, OP_NONE) })(result8)
                  : null;
                if (result9 !== null) {
                  var result7 = result9;
                } else {
                  var result7 = null;
                  pos = savedPos2;
                }
                if (result7 !== null) {
                  var result0 = result7;
                } else {
                  var savedPos0 = pos;
                  var savedPos1 = pos;
                  if (input.substr(pos).match(/^[ ]/) !== null) {
                    var result4 = input.charAt(pos);
                    pos++;
                  } else {
                    var result4 = null;
                    if (reportMatchFailures) {
                      matchFailed("[ ]");
                    }
                  }
                  if (result4 !== null) {
                    if (input.substr(pos, 3) === "but") {
                      var result5 = "but";
                      pos += 3;
                    } else {
                      var result5 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"but\"");
                      }
                    }
                    if (result5 !== null) {
                      if (input.substr(pos).match(/^[ ]/) !== null) {
                        var result6 = input.charAt(pos);
                        pos++;
                      } else {
                        var result6 = null;
                        if (reportMatchFailures) {
                          matchFailed("[ ]");
                        }
                      }
                      if (result6 !== null) {
                        var result2 = [result4, result5, result6];
                      } else {
                        var result2 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result2 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result2 = null;
                    pos = savedPos1;
                  }
                  var result3 = result2 !== null
                    ? (function(sep) { return createNode( NODE_OP, OP_NONE) })(result2)
                    : null;
                  if (result3 !== null) {
                    var result1 = result3;
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                  if (result1 !== null) {
                    var result0 = result1;
                  } else {
                    var result0 = null;;
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_un_op() {
        var cacheKey = 'un_op@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "~") {
          var result1 = "~";
          pos += 1;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"~\"");
          }
        }
        var result2 = result1 !== null
          ? (function(unOP) { return createNode( NODE_OP, OP_NEG)  })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_EOF() {
        var cacheKey = 'EOF@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedReportMatchFailuresVar0 = reportMatchFailures;
        reportMatchFailures = false;
        if (input.length > pos) {
          var result1 = input.charAt(pos);
          pos++;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed('any character');
          }
        }
        reportMatchFailures = savedReportMatchFailuresVar0;
        if (result1 === null) {
          var result0 = '';
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          failuresExpected.sort();
          
          var lastFailure = null;
          var failuresExpectedUnique = [];
          for (var i = 0; i < failuresExpected.length; i++) {
            if (failuresExpected[i] !== lastFailure) {
              failuresExpectedUnique.push(failuresExpected[i]);
              lastFailure = failuresExpected[i];
            }
          }
          
          switch (failuresExpectedUnique.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpectedUnique[0];
            default:
              return failuresExpectedUnique.slice(0, failuresExpectedUnique.length - 1).join(', ')
                + ' or '
                + failuresExpectedUnique[failuresExpectedUnique.length - 1];
          }
        }
        
        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quote(input.charAt(actualPos))
          : 'end of input';
        
        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      
function NODE()
      
{
      
	var type;
      
	var value;
      
	var children;
      
}
      

      
//Management functions
      
function createNode( type, value, children )
      
{
      
	var n = new NODE();
      
	n.type = type;
      
	n.value = value;	
      
	n.children = new Array();
      
	
      
	for( var i = 2; i < arguments.length; i++ )
      
		n.children.push( arguments[i] );
      
		
      
	return n;
      
}
      

      

      
NODE_OP		= 0
      
NODE_VAR	= 1
      
NODE_CONST	= 2
      
NODE_TYPE	= 3
      

      
OP_NONE		= -1
      
OP_ADD          = 1
      
OP_OR		= 2
      
OP_XOR		= 3
      
OP_AND		= 4
      
OP_SUB		= 5
      
OP_MUL		= 6
      
OP_DIV		= 7
      
OP_MOD		= 8
      
OP_UNR		= 9
      
OP_NEG		= 10
      

      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
